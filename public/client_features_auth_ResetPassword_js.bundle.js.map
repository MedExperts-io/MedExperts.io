{"version":3,"file":"client_features_auth_ResetPassword_js.bundle.js","mappings":"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","sources":["webpack://medexperts.io/./client/features/auth/RequestNewPW.js","webpack://medexperts.io/./client/features/auth/ResetPassword.js"],"sourcesContent":["import React from \"react\";\nimport { Button, Card, Container, Form, Row, Col } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { forgotPassword } from \"./authSlice\";\n\nconst RequestNewPassword = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const email = evt.target.email.value;\n\n    dispatch(forgotPassword({ email }));\n    navigate(\"/forgotPassword/confirmation\");\n  };\n\n  return (\n    <Container>\n      <Row className=\"p-5 justify-content-center\">\n        <Col>\n          <Card className=\"shadow mx-auto\" id=\"request-pw-reset-card\">\n            <Card.Header id=\"request-pw-reset-card-header\">\n              Request new password\n            </Card.Header>\n            <Card.Body>\n              <div>\n                <div className=\"mb-3\">\n                  <Form onSubmit={handleSubmit}>\n                    <p>\n                      Enter your user account's verified email address and we\n                      will send you a password reset link.\n                    </p>\n                    <Form.Group className=\"mb-3\" controlId=\"email\">\n                      <Form.Control\n                        type=\"email\"\n                        placeholder=\"Email Address\"\n                        required\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        Please provide a valid email address.\n                      </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Button variant=\"success\" type=\"submit\">\n                      Send password reset email\n                    </Button>\n                  </Form>\n                </div>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default RequestNewPassword;\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Container, Row, Card, Button, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { resetPassword, isResetLinkValid } from \"./authSlice\";\nimport { useSearchParams } from \"react-router-dom\";\nimport RequestNewPassword from \"./RequestNewPW\";\n\nconst ResetPassword = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { error } = useSelector((state) => state.auth);\n  const [validated, setValidated] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const token = searchParams.get(\"token\");\n  const uid = searchParams.get(\"uid\");\n\n  useEffect(() => {\n    dispatch(isResetLinkValid({ token, uid }));\n  }, []);\n\n  const [password1, setPassword1] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n\n  //password checker start\n  const atLeastOneUppercase = /[A-Z]/g;\n  const atLeastOneLowercase = /[a-z]/g;\n  const atLeastOneNumber = /[0-9]/g;\n  const atLeastOneSpecialCharacter = /[#?!@$%^&*-]/g;\n  const eightCharactersOrMore = /.{8,}/g;\n  const [showReqs, setShowReqs] = useState(false);\n\n  const passwordTracker = {\n    uppercase: password1.match(atLeastOneUppercase),\n    lowercase: password1.match(atLeastOneLowercase),\n    number: password1.match(atLeastOneNumber),\n    specialCharacter: password1.match(atLeastOneSpecialCharacter),\n    eightCharactersOrGreater: password1.match(eightCharactersOrMore),\n  };\n\n  const passwordStrength = Object.values(passwordTracker).filter((value) => value).length;\n  //password checker end\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const password1 = evt.target.resetPassword.value;\n    const password2 = evt.target.confirmResetPassword.value;\n\n    if (validated) {\n      dispatch(resetPassword({ password1, password2, token, uid })).then(() => navigate(\"/login\"));\n    }\n  };\n\n  return (\n    <Container>\n      <Row className=\"p-5 justify-content-center\">\n        <Col>\n          {error ? (\n            <>\n              <center>\n                <p className=\"expired-link\">Sorry, your reset password link has either expired or already been used. You may request a new link below.</p>\n              </center>\n              <RequestNewPassword />\n            </>\n          ) : (\n            <Card className=\"shadow mx-auto\" id=\"request-pw-reset-card\">\n              <Card.Header id=\"request-pw-reset-card-header\">Reset Account Password</Card.Header>\n              <Card.Body>\n                <div>\n                  <div className=\"mb-3\">\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                      <p>Enter your password below.</p>\n                      <Form.Group className=\"mb-3\" controlId=\"resetPassword\">\n                        <Form.Label>\n                          New password <span className=\"asterisk\">*</span>\n                        </Form.Label>\n                        <Form.Control\n                          onFocus={() => setShowReqs(true)}\n                          onChange={(e) => {\n                            setPassword1(e.target.value);\n                          }}\n                          value={password1}\n                          required\n                          type=\"password\"\n                          autoComplete=\"new-password\"\n                          placeholder=\"Enter password\"\n                        />\n                        <Form.Control.Feedback type=\"invalid\">Please provide a password.</Form.Control.Feedback>\n                      </Form.Group>\n                      <Form.Group className=\"mb-3\" controlId=\"confirmResetPassword\">\n                        <Form.Label>\n                          Confirm new password <span className=\"asterisk\">*</span>\n                        </Form.Label>\n                        <Form.Control\n                          onChange={(e) => {\n                            setPassword2(e.target.value);\n                          }}\n                          required\n                          autoComplete=\"re-enter-new-password\"\n                          type=\"password\"\n                          placeholder=\"Enter password\"\n                        />\n                        <Form.Control.Feedback type=\"invalid\">Please provide a password.</Form.Control.Feedback>\n                      </Form.Group>\n                      {password1 !== password2 && <div className=\"warning\">Passwords do not match</div>}\n                      {showReqs && (\n                        <div>\n                          <div className=\"password-strength-meter\"></div>\n                          <div className=\"\">\n                            <ul>\n                              <small style={{ textDecorationLine: \"underline\" }}>{passwordStrength < 5 && \"Password Requirements\"}</small>\n                              <small>\n                                {!passwordTracker.uppercase && <li>MUST contain at least one uppercase letter</li>}\n                                {!passwordTracker.lowercase && <li>MUST contain at least one lowercase letter</li>}\n                                {!passwordTracker.specialCharacter && <li>MUST contain at least one special character (#?!@$%^&*-)</li>}\n                                {!passwordTracker.number && <li>MUST contain at least one number</li>}\n                                {!passwordTracker.eightCharactersOrGreater && <li>MUST contain at least 8 characters</li>}\n                              </small>\n                            </ul>\n                          </div>\n                        </div>\n                      )}\n                      <Button onClick={() => setValidated(true)} variant=\"success\" type=\"submit\" disabled={password1 !== password2 || passwordStrength != 5}>\n                        Reset password\n                      </Button>\n                    </Form>\n                  </div>\n                </div>\n              </Card.Body>\n            </Card>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ResetPassword;\n"],"names":["React","Button","Card","Container","Form","Row","Col","useDispatch","useNavigate","forgotPassword","RequestNewPassword","dispatch","navigate","handleSubmit","evt","preventDefault","email","target","value","createElement","className","id","Header","Body","onSubmit","Group","controlId","Control","type","placeholder","required","Feedback","variant","useState","useEffect","useSelector","resetPassword","isResetLinkValid","useSearchParams","ResetPassword","_useSelector","state","auth","error","_useState","_useState2","_slicedToArray","validated","setValidated","_useSearchParams","_useSearchParams2","searchParams","token","get","uid","_useState3","_useState4","password1","setPassword1","_useState5","_useState6","password2","setPassword2","atLeastOneUppercase","atLeastOneLowercase","atLeastOneNumber","atLeastOneSpecialCharacter","eightCharactersOrMore","_useState7","_useState8","showReqs","setShowReqs","passwordTracker","uppercase","match","lowercase","number","specialCharacter","eightCharactersOrGreater","passwordStrength","Object","values","filter","length","confirmResetPassword","then","Fragment","noValidate","Label","onFocus","onChange","e","autoComplete","style","textDecorationLine","onClick","disabled"],"sourceRoot":""}