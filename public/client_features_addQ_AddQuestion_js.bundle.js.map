{"version":3,"file":"client_features_addQ_AddQuestion_js.bundle.js","mappings":"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","sources":["webpack://medexperts.io/./client/features/addQ/AddQuestion.js","webpack://medexperts.io/./client/features/addQ/firebase.js"],"sourcesContent":["import { getDownloadURL, listAll, ref, uploadBytes } from \"firebase/storage\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Card,\n  Col,\n  Form,\n  InputGroup,\n  Modal,\n  ProgressBar,\n  Row,\n  Table,\n  Toast,\n  ToastContainer,\n} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { v4 as uuidv4, v4 } from \"uuid\";\nimport {\n  fetchAllQuestionsAnswers,\n  NewQuestionsAnswers,\n} from \"../allQA/allQASlice\";\nimport { storage } from \"./firebase\";\n\nconst AddQuestion = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      dispatch(fetchAllQuestionsAnswers());\n      setLoading(false);\n    }, 500);\n  }, []);\n\n  const [newQuestion, setNewQuestion] = useState(\"\");\n  const [newSingleOption, setNewSingleOption] = useState(\"\");\n  const [newAnswerOptions, setNewAnswerOptions] = useState([\n    \"Type multiple choice option 1\",\n    \"Type multiple choice option 2\",\n    \"Type multiple choice option 3\",\n    \"Type multiple choice option 4\",\n  ]);\n  const [newCorrectAnswer, setNewCorrectAnswer] = useState(\"Select answer\");\n  const [newExplanation, setNewExplanation] = useState(\"\");\n\n  const [newSingleLink, setNewSingleLink] = useState(\"\");\n  const [newSource, setNewSource] = useState(\"\");\n  const [newExplanationLinks, setNewExplanationLinks] = useState([]);\n\n  const [newCategory, setNewCategory] = useState(\"\");\n  const [newLevel, setNewLevel] = useState(\"\");\n\n  //------------ toast details\n  const [showToast, setShowToast] = useState(false);\n  const [toastMsg, setToastMsg] = useState(\"\");\n  const toggleShowToast = () => setShowToast(!showToast);\n  //----------- end toast details\n\n  //------------ alert details\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMsg, setAlertMsg] = useState(\"\");\n  const toggleShowAlert = () => setShowAlert(!showAlert);\n  //----------- end alert details\n\n  const [validated, setValidated] = useState(false);\n\n  //------------ modal details\n  const [showModal, setShowModal] = useState(false);\n  const [modalMsg, setModalMsg] = useState(\"\");\n  const handleClose = () => {\n    setValidated(false);\n    setShowModal(false);\n  };\n  const handleShow = () => setShowModal(true);\n  //------------ end modal details\n\n  const AllQ = useSelector((state) => state.questionsAnswers.questionsAnswers);\n  const newQuestionid = useSelector(\n    (state) => state.questionsAnswers.newQuestion.id\n  );\n  const Questionid = AllQ.length + 1;\n\n  //Question Images\n  const [imageUrls, setImageUrls] = useState([]);\n  const [newSingleQImageAltText, setNewSingleQImageAltText] = useState(\"\");\n  const [newQuestionImageAltText, setNewQuestionImageAltText] = useState([]);\n\n  const [imageUpload, setImageUpload] = useState(null);\n  const imagesListRef = ref(storage, `images/${Questionid}/`);\n  const uploadFile = () => {\n    if (imageUpload == null) return;\n    const imageRef = ref(\n      storage,\n      `images/${Questionid}/${imageUpload.name + v4()}`\n    );\n    uploadBytes(imageRef, imageUpload).then((snapshot) => {\n      getDownloadURL(snapshot.ref).then((url) => {\n        setImageUrls((prev) => [...prev, url]);\n      });\n    });\n\n    listAll(`images/${Questionid}/${imageUpload.name + v4()}`).then(\n      (response) => {\n        response.items.forEach((item) => {\n          getDownloadURL(item).then((url) => {\n            setImageUrls((prev) => [...prev, url]);\n          });\n        });\n      }\n    );\n\n    newQuestionImageAltText[imageUrls.length] = newSingleQImageAltText.trim();\n  };\n\n  //Explanation Images\n  const [eimageUrls, seteImageUrls] = useState([]);\n  const [newSingleExpImageAltText, setNewSingleExpImageAltText] = useState(\"\");\n  const [newExplanationImageAltText, setNewExplanationImageAltText] = useState(\n    []\n  );\n\n  const [eimageUpload, seteImageUpload] = useState(null);\n  const eimagesListRef = ref(storage, `images/${Questionid}/explanation`);\n  const euploadFile = () => {\n    if (eimageUpload == null) return;\n    const imageRef = ref(\n      storage,\n      `images/${Questionid}/explanation/${eimageUpload.name + v4()}`\n    );\n    uploadBytes(imageRef, eimageUpload).then((snapshot) => {\n      getDownloadURL(snapshot.ref).then((url) => {\n        seteImageUrls((prev) => [...prev, url]);\n      });\n    });\n\n    listAll(\n      `images/${Questionid}/explanation/${eimageUpload.name + v4()}`\n    ).then((response) => {\n      response.items.forEach((item) => {\n        getDownloadURL(item).then((url) => {\n          seteImageUrls((prev) => [...prev, url]);\n        });\n      });\n    });\n    newExplanationImageAltText[eimageUrls.length] =\n      newSingleExpImageAltText.trim();\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (\n      newQuestion.trim() === \"\" ||\n      newCategory === \"\" ||\n      newCategory === \"none\" ||\n      newLevel === \"\" ||\n      newLevel === \"none\"\n    ) {\n      setAlertMsg(\n        \"A required field is missing! Please fill out Question, Answer, Category, and Level\"\n      );\n      toggleShowAlert();\n    } else {\n      dispatch(\n        NewQuestionsAnswers({\n          question: newQuestion.trim(),\n          questionImage: imageUrls,\n          questionImageAltText: newQuestionImageAltText,\n          answerOptions: newAnswerOptions,\n          correctAnswer: newCorrectAnswer,\n          explanation: newExplanation.trim(),\n          explanationImage: eimageUrls,\n          explanationImageAltText: newExplanationImageAltText,\n          explanationLinks: newExplanationLinks,\n          category: newCategory,\n          level: newLevel,\n        })\n      );\n      setModalMsg(\"New question successfully added!\");\n      setValidated(true);\n    }\n  };\n\n  const clearText = (evt, text) => {\n    evt.target.value = text;\n  };\n\n  return (\n    <>\n      {loading ? (\n        <ProgressBar animated now={100} />\n      ) : (\n        <Row>\n          <ToastContainer className=\"p-3\" position=\"middle-end\">\n            <Toast\n              bg=\"success\"\n              show={showToast}\n              onClose={toggleShowToast}\n              delay={5000}\n              autohide\n              animation={true}\n            >\n              <Toast.Header>\n                <strong\n                  className=\"me-auto\"\n                  style={{\n                    fontSize: \"150%\",\n                  }}\n                >\n                  Saved!\n                </strong>\n              </Toast.Header>\n              <Toast.Body\n                style={{\n                  fontSize: \"150%\",\n                }}\n              >\n                {toastMsg}\n              </Toast.Body>\n            </Toast>\n          </ToastContainer>\n          <Alert\n            variant=\"danger\"\n            dismissible\n            show={showAlert}\n            onClose={toggleShowAlert}\n          >\n            <Alert.Heading>\n              <strong>Alert!</strong>\n            </Alert.Heading>\n            <p>{alertMsg}</p>\n          </Alert>\n          <Card\n            id=\"no-border\"\n            className=\"mx-auto\"\n            style={{ maxWidth: \"900px\" }}\n          >\n            <Col>\n              <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"question\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Question</strong>\n                    </Form.Label>\n                    <Form.Control\n                      required\n                      as=\"textarea\"\n                      rows={3}\n                      placeholder=\"Type question here\"\n                      defaultValue={newQuestion}\n                      onChange={(e) => {\n                        setNewQuestion(e.target.value);\n                      }}\n                      onFocus={() => setShowAlert(false)}\n                    />\n                  </Form.Group>\n                </Row>\n\n                {/* //Question Image List */}\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"questionImage\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Question Figures</strong>\n                    </Form.Label>\n\n                    <InputGroup className=\"mb-3\">\n                      <Form.Control\n                        type=\"file\"\n                        onChange={(e) => {\n                          setImageUpload(e.target.files[0]);\n                        }}\n                        onFocus={() => setShowAlert(false)}\n                      />\n\n                      <InputGroup.Text>Alt Text</InputGroup.Text>\n                      <Form.Control\n                        type=\"text\"\n                        placeholder=\"Type alt text here\"\n                        defaultValue={newSingleQImageAltText}\n                        onChange={(e) => {\n                          setNewSingleQImageAltText(e.target.value);\n                        }}\n                        onFocus={() => setShowAlert(false)}\n                      />\n                      <Button\n                        variant=\"outline-secondary\"\n                        onClick={() => {\n                          if (\n                            imageUpload &&\n                            newSingleQImageAltText.trim() !== \"\"\n                          ) {\n                            uploadFile();\n                            setToastMsg(\n                              `Image with alt text: \"${newSingleQImageAltText.trim()}\".`\n                            );\n                            setNewSingleQImageAltText(\"\");\n                            toggleShowToast();\n                          } else {\n                            setAlertMsg(\n                              \"You must enter both Image and Alt Text.\"\n                            );\n                            toggleShowAlert();\n                          }\n                        }}\n                      >\n                        Upload\n                      </Button>\n                    </InputGroup>\n\n                    <Table\n                      size=\"sm\"\n                      bordered\n                      responsive\n                      style={{\n                        tableLayout: \"fixed\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      <thead\n                        style={{\n                          background: \"#eaecef\",\n                          color: \"#6c767d\",\n                        }}\n                      >\n                        <tr>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Figure #\n                          </th>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Preview\n                          </th>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Alt Text\n                          </th>\n                          <th></th>\n                        </tr>\n                      </thead>\n                      <tbody style={{ borderTop: \"none\" }}>\n                        {imageUrls?.map((link, linkIdx) => (\n                          <tr key={uuidv4()}>\n                            <td>\n                              {\" \"}\n                              <a href={link} target=\"_blank\">\n                                {\" \"}\n                                {linkIdx + 1}\n                              </a>\n                            </td>\n                            <td>\n                              <img\n                                src={link}\n                                style={{ width: \"150px\", height: \"100px\" }}\n                              />{\" \"}\n                            </td>\n                            <td>\n                              <InputGroup className=\"mb-3\">\n                                <Form.Control\n                                  as=\"textarea\"\n                                  rows={3}\n                                  onClick={(evt) => {\n                                    clearText(\n                                      evt,\n                                      newQuestionImageAltText[linkIdx]\n                                    );\n                                  }}\n                                  defaultValue={\n                                    newQuestionImageAltText[linkIdx]\n                                  }\n                                  onChange={(e) => {\n                                    newQuestionImageAltText[linkIdx] =\n                                      e.target.value;\n                                  }}\n                                  placeholder=\"Type alt text here\"\n                                  onFocus={() => setShowAlert(false)}\n                                />\n                                <Button\n                                  variant=\"outline-secondary\"\n                                  onClick={() => {\n                                    if (\n                                      newQuestionImageAltText[\n                                        linkIdx\n                                      ].trim() !== \"\"\n                                    ) {\n                                      setNewQuestionImageAltText(\n                                        newQuestionImageAltText?.map(\n                                          (currentText, idx) => {\n                                            if (idx === linkIdx) {\n                                              currentText =\n                                                newQuestionImageAltText[\n                                                  linkIdx\n                                                ].trim();\n                                            }\n                                            return currentText;\n                                          }\n                                        )\n                                      );\n                                      setToastMsg(\n                                        `Image with alt text: \"${newQuestionImageAltText[\n                                          linkIdx\n                                        ].trim()}\".`\n                                      );\n                                      toggleShowToast();\n                                    } else {\n                                      setAlertMsg(\n                                        `You must enter an alt text for the image here or 'Remove' this entire row.`\n                                      );\n                                      toggleShowAlert();\n                                    }\n                                  }}\n                                >\n                                  Save\n                                </Button>\n                              </InputGroup>\n                            </td>\n                            <td>\n                              {\" \"}\n                              <Button\n                                variant=\"outline-secondary\"\n                                onClick={() => {\n                                  setImageUrls(\n                                    imageUrls.filter((currentLink, idx) => {\n                                      return idx !== linkIdx;\n                                    })\n                                  );\n                                  setNewQuestionImageAltText(\n                                    newQuestionImageAltText.filter(\n                                      (currentText, idx) => {\n                                        return idx != linkIdx;\n                                      }\n                                    )\n                                  );\n                                }}\n                              >\n                                Remove\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </Table>\n                  </Form.Group>\n                </Row>\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"answerOptions\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Options</strong>\n                    </Form.Label>\n\n                    <InputGroup className=\"mb-3\">\n                      <Form.Control\n                        type=\"text\"\n                        placeholder=\"Type new multiple choice option here\"\n                        defaultValue={newSingleOption}\n                        onChange={(e) => {\n                          setNewSingleOption(e.target.value);\n                        }}\n                        onFocus={() => setShowAlert(false)}\n                      />\n                      <Button\n                        variant=\"outline-secondary\"\n                        onClick={() => {\n                          if (newSingleOption.trim() !== \"\") {\n                            setNewAnswerOptions([\n                              ...newAnswerOptions,\n                              newSingleOption.trim(),\n                            ]);\n                            setToastMsg(newSingleOption.trim());\n                            setNewSingleOption(\"\"); // Doesn't clear field for some reason\n                            toggleShowToast();\n                          } else {\n                            setAlertMsg(\n                              \"You haven't added a new multiple choice option yet.\"\n                            );\n                            toggleShowAlert();\n                          }\n                        }}\n                      >\n                        Add\n                      </Button>\n                    </InputGroup>\n\n                    {newAnswerOptions?.map((option, optionIdx) => (\n                      <InputGroup className=\"mb-3\" key={uuidv4()}>\n                        <Form.Control\n                          type=\"text\"\n                          onClick={(evt) => clearText(evt, option)}\n                          defaultValue={option}\n                          onChange={(e) => {\n                            option = e.target.value;\n                          }}\n                          placeholder={`Type multiple choice option ${\n                            optionIdx + 1\n                          }`}\n                          onFocus={() => setShowAlert(false)}\n                        />\n                        <Button\n                          variant=\"outline-secondary\"\n                          onClick={() => {\n                            if (option.trim() !== \"\") {\n                              setNewAnswerOptions(\n                                newAnswerOptions?.map((currentOption, idx) => {\n                                  if (idx === optionIdx) {\n                                    currentOption = option.trim();\n                                  }\n                                  return currentOption;\n                                })\n                              );\n\n                              setToastMsg(option.trim());\n                              toggleShowToast();\n                            } else {\n                              setAlertMsg(\n                                `You must enter a multiple choice option here or 'Remove' this field`\n                              );\n                              toggleShowAlert();\n                            }\n                          }}\n                        >\n                          Save\n                        </Button>\n                        <Button\n                          variant=\"outline-secondary\"\n                          onClick={() => {\n                            setNewAnswerOptions(\n                              newAnswerOptions.filter((currentOption, idx) => {\n                                return idx !== optionIdx;\n                              })\n                            );\n                          }}\n                        >\n                          Remove\n                        </Button>\n                      </InputGroup>\n                    ))}\n                  </Form.Group>\n                </Row>\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"correctAnswer\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Answer</strong>\n                    </Form.Label>\n                    <Form.Select\n                      aria-label=\"Default select example\"\n                      onChange={(e) => {\n                        setNewCorrectAnswer(e.target.value);\n                      }}\n                    >\n                      <option defaultValue> {newCorrectAnswer}</option>\n                      {newAnswerOptions?.map((option) => (\n                        <option value={option} key={uuidv4()}>\n                          {option}\n                        </option>\n                      ))}\n                    </Form.Select>\n                  </Form.Group>\n                </Row>\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"explanation\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Explanation</strong>\n                    </Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      rows={3}\n                      placeholder=\"Type explanation here\"\n                      defaultValue={newExplanation}\n                      onChange={(e) => {\n                        setNewExplanation(e.target.value);\n                      }}\n                      onFocus={() => setShowAlert(false)}\n                    ></Form.Control>\n                  </Form.Group>\n                </Row>\n\n                {/* explanation image links */}\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"explanationImage\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Explanation Figures</strong>\n                    </Form.Label>\n\n                    <InputGroup className=\"mb-3\">\n                      <Form.Control\n                        type=\"file\"\n                        onChange={(e) => {\n                          seteImageUpload(e.target.files[0]);\n                        }}\n                        onFocus={() => setShowAlert(false)}\n                      />\n                      <InputGroup.Text>Alt Text</InputGroup.Text>\n                      <Form.Control\n                        type=\"text\"\n                        placeholder=\"Type alt text here\"\n                        defaultValue={newSingleExpImageAltText}\n                        onChange={(e) => {\n                          setNewSingleExpImageAltText(e.target.value);\n                        }}\n                        onFocus={() => setShowAlert(false)}\n                      />\n                      <Button\n                        variant=\"outline-secondary\"\n                        onClick={() => {\n                          if (\n                            eimageUpload &&\n                            newSingleExpImageAltText.trim() !== \"\"\n                          ) {\n                            euploadFile();\n                            setToastMsg(\n                              `Image with alt text: \"${newSingleExpImageAltText.trim()}\".`\n                            );\n                            setNewSingleExpImageAltText(\"\");\n                            toggleShowToast();\n                          } else {\n                            setAlertMsg(\n                              \"You must enter both Image and Alt Text.\"\n                            );\n                            toggleShowAlert();\n                          }\n                        }}\n                      >\n                        Upload\n                      </Button>\n                    </InputGroup>\n\n                    <Table\n                      size=\"sm\"\n                      bordered\n                      responsive\n                      style={{\n                        tableLayout: \"fixed\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      <thead\n                        style={{\n                          background: \"#eaecef\",\n                          color: \"#6c767d\",\n                        }}\n                      >\n                        <tr>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Figure #\n                          </th>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Preview\n                          </th>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Alt Text\n                          </th>\n                          <th></th>\n                        </tr>\n                      </thead>\n                      <tbody style={{ borderTop: \"none\" }}>\n                        {eimageUrls?.map((link, linkIdx) => (\n                          <tr key={uuidv4()}>\n                            <td>\n                              {\" \"}\n                              <a href={link} target=\"_blank\">\n                                {\" \"}\n                                {linkIdx + 1}\n                              </a>\n                            </td>\n                            <td>\n                              <img\n                                src={link}\n                                style={{ width: \"150px\", height: \"100px\" }}\n                              />{\" \"}\n                            </td>\n                            <td>\n                              <InputGroup className=\"mb-3\">\n                                <Form.Control\n                                  as=\"textarea\"\n                                  rows={3}\n                                  onClick={(evt) => {\n                                    clearText(\n                                      evt,\n                                      newExplanationImageAltText[linkIdx]\n                                    );\n                                  }}\n                                  defaultValue={\n                                    newExplanationImageAltText[linkIdx]\n                                  }\n                                  onChange={(e) => {\n                                    newExplanationImageAltText[linkIdx] =\n                                      e.target.value;\n                                  }}\n                                  placeholder=\"Type alt text here\"\n                                  onFocus={() => setShowAlert(false)}\n                                />\n                                <Button\n                                  variant=\"outline-secondary\"\n                                  onClick={() => {\n                                    if (\n                                      newExplanationImageAltText[\n                                        linkIdx\n                                      ].trim() !== \"\"\n                                    ) {\n                                      setNewExplanationImageAltText(\n                                        newExplanationImageAltText?.map(\n                                          (currentText, idx) => {\n                                            if (idx === linkIdx) {\n                                              currentText =\n                                                newExplanationImageAltText[\n                                                  linkIdx\n                                                ].trim();\n                                            }\n                                            return currentText;\n                                          }\n                                        )\n                                      );\n                                      setToastMsg(\n                                        `Image with alt text: \"${newExplanationImageAltText[\n                                          linkIdx\n                                        ].trim()}\".`\n                                      );\n                                      toggleShowToast();\n                                    } else {\n                                      setAlertMsg(\n                                        `You must enter an alt text for the image here or 'Remove' this entire row.`\n                                      );\n                                      toggleShowAlert();\n                                    }\n                                  }}\n                                >\n                                  Save\n                                </Button>\n                              </InputGroup>\n                            </td>\n                            <td>\n                              {\" \"}\n                              <Button\n                                variant=\"outline-secondary\"\n                                onClick={() => {\n                                  seteImageUrls(\n                                    eimageUrls.filter((currentLink, idx) => {\n                                      return idx !== linkIdx;\n                                    })\n                                  );\n                                  setNewExplanationImageAltText(\n                                    newExplanationImageAltText.filter(\n                                      (currentText, idx) => {\n                                        return idx != linkIdx;\n                                      }\n                                    )\n                                  );\n                                }}\n                              >\n                                Remove\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </Table>\n                  </Form.Group>\n                </Row>\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"explanationLinks\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Explanation Sources</strong>\n                    </Form.Label>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Link</InputGroup.Text>\n                      <Form.Control\n                        aria-label=\"Link\"\n                        type=\"text\"\n                        defaultValue={newSingleLink}\n                        placeholder=\"Type link here\"\n                        onChange={(e) => {\n                          setNewSingleLink(e.target.value);\n                        }}\n                        onFocus={() => setShowAlert(false)}\n                      />\n                      <InputGroup.Text>Citation</InputGroup.Text>\n                      <Form.Control\n                        aria-label=\"Citation\"\n                        type=\"text\"\n                        placeholder=\"Type citation here\"\n                        defaultValue={newSource}\n                        onChange={(e) => {\n                          setNewSource(e.target.value);\n                        }}\n                        onFocus={() => setShowAlert(false)}\n                      />\n                      <Button\n                        variant=\"outline-secondary\"\n                        onClick={() => {\n                          if (\n                            newSingleLink.trim() !== \"\" &&\n                            newSource.trim() !== \"\"\n                          ) {\n                            setNewExplanationLinks([\n                              ...newExplanationLinks,\n                              `<a href=\"` +\n                                newSingleLink.trim() +\n                                `\" target=\"_blank\">` +\n                                newSource.trim() +\n                                `</a`,\n                            ]);\n                            setToastMsg(\n                              `Citation: ${newSource.trim()} \\n Link: ${newSingleLink.trim()}`\n                            );\n                            setNewSingleLink(\"\"); //Doesn't clear field for some reason\n                            setNewSource(\"\"); //Doesn't clear field for some reason\n                            toggleShowToast();\n                          } else {\n                            setAlertMsg(\n                              \"You must enter both Link and Citation.\"\n                            );\n                            toggleShowAlert();\n                          }\n                        }}\n                      >\n                        Add\n                      </Button>\n                    </InputGroup>\n\n                    <Table\n                      size=\"sm\"\n                      bordered\n                      responsive\n                      style={{\n                        tableLayout: \"fixed\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      <thead\n                        style={{\n                          background: \"#eaecef\",\n                          color: \"#6c767d\",\n                        }}\n                      >\n                        <tr>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Link\n                          </th>\n                          <th\n                            style={{\n                              fontWeight: \"normal\",\n                            }}\n                          >\n                            Citation\n                          </th>\n                          <th></th>\n                        </tr>\n                      </thead>\n                      <tbody style={{ borderTop: \"none\" }}>\n                        {newExplanationLinks?.map((link, linkIdx) => (\n                          <tr key={uuidv4()}>\n                            <td> {link.slice(9, link.indexOf(\">\") - 17)}</td>\n                            <td>\n                              {link.slice(\n                                link.indexOf(\">\") + 1,\n                                link.lastIndexOf(\"<\")\n                              )}\n                            </td>\n                            <td>\n                              {\" \"}\n                              <Button\n                                variant=\"outline-secondary\"\n                                onClick={() => {\n                                  setNewExplanationLinks(\n                                    newExplanationLinks.filter(\n                                      (currentLink, idx) => {\n                                        return idx !== linkIdx;\n                                      }\n                                    )\n                                  );\n                                }}\n                              >\n                                Remove\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </Table>\n                  </Form.Group>\n                </Row>\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"category\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Category</strong>\n                    </Form.Label>\n                    <Form.Select\n                      aria-label=\"default select example\"\n                      onChange={(e) => {\n                        setNewCategory(e.target.value);\n                      }}\n                      onFocus={() => setShowAlert(false)}\n                    >\n                      <option value=\"none\">Select category</option>\n                      <option value=\"Asthma\">Asthma</option>\n                      <option value=\"Bronchiectasis\">Bronchiectasis</option>\n                      <option value=\"Chronic Obstructive Pulmonary Disease\">\n                        Chronic Obstructive Pulmonary Disease\n                      </option>\n                      <option value=\"Critical Care\">Critical Care</option>\n                      <option value=\"Infection\">Infection</option>\n                      <option value=\"Interstitial Lung Diseases\">\n                        Interstitial Lung Diseases\n                      </option>\n                      <option value=\"Lung Transplant\">Lung Transplant</option>\n                      <option value=\"Lung Cancer\">Lung Cancer</option>\n                      <option value=\"Mediastinal Disorders\">\n                        Mediastinal Disorders\n                      </option>\n                      <option value=\"Other Pulmonary Diseases\">\n                        Other Pulmonary Diseases\n                      </option>\n                      <option value=\"Pharmacology\">Pharmacology</option>\n                      <option value=\"Pleural Diseases\">Pleural Diseases</option>\n                      <option value=\"Pulmonary Function Testing\">\n                        Pulmonary Function Testing\n                      </option>\n                      <option value=\"Pulmonary Vascular Disease\">\n                        Pulmonary Vascular Disease\n                      </option>\n                      <option value=\"Sleep\">Sleep</option>\n                    </Form.Select>\n                  </Form.Group>\n\n                  <Form.Group as={Col} controlId=\"level\">\n                    <Form.Label>\n                      <strong className=\"me-auto\">Level</strong>\n                    </Form.Label>\n                    <Form.Select\n                      aria-label=\"default select example\"\n                      onChange={(e) => {\n                        setNewLevel(e.target.value);\n                      }}\n                      onFocus={() => setShowAlert(false)}\n                    >\n                      <option value=\"none\">Select difficulty level</option>\n                      <option value=\"Easy\">Easy</option>\n                      <option value=\"Moderate\">Moderate</option>\n                      <option value=\"Hard\">Hard</option>\n                    </Form.Select>\n                  </Form.Group>\n                </Row>\n\n                <center>\n                  <Button\n                    type=\"submit\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      if (\n                        newQuestion.trim() !== \"\" &&\n                        newCategory !== \"\" &&\n                        newCategory !== \"none\" &&\n                        newLevel !== \"\" &&\n                        newLevel !== \"none\"\n                      ) {\n                        handleShow();\n                      }\n                    }}\n                  >\n                    Add Question\n                  </Button>\n                </center>\n\n                <Modal show={showModal} onHide={handleClose}>\n                  <Modal.Body>{modalMsg}</Modal.Body>\n                  <Modal.Footer>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => {\n                        navigate(`/questions/${newQuestionid}`);\n                      }}\n                    >\n                      View Question\n                    </Button>\n                  </Modal.Footer>\n                </Modal>\n              </Form>\n            </Col>\n          </Card>\n        </Row>\n      )}\n    </>\n  );\n};\n\nexport default AddQuestion;\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getStorage } from \"firebase/storage\";\n// require proces\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7N-A9S6LI4jZE9DIqHemMF11ISeY_dgQ\",\n  authDomain: \"medexpertsio-a0906.firebaseapp.com\",\n  projectId: \"medexpertsio-a0906\",\n  storageBucket: \"medexpertsio-a0906.appspot.com\",\n  messagingSenderId: \"970371423179\",\n  appId: \"1:970371423179:web:e5321a068eb1ec5fdbf44e\",\n  measurementId: \"G-EMH2T6VRSW\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nexport const storage = getStorage(app);\n"],"names":["getDownloadURL","listAll","ref","uploadBytes","React","useEffect","useState","Alert","Button","Card","Col","Form","InputGroup","Modal","ProgressBar","Row","Table","Toast","ToastContainer","useDispatch","useSelector","useNavigate","v4","uuidv4","fetchAllQuestionsAnswers","NewQuestionsAnswers","storage","AddQuestion","dispatch","navigate","_useState","_useState2","_slicedToArray","loading","setLoading","setTimeout","_useState3","_useState4","newQuestion","setNewQuestion","_useState5","_useState6","newSingleOption","setNewSingleOption","_useState7","_useState8","newAnswerOptions","setNewAnswerOptions","_useState9","_useState10","newCorrectAnswer","setNewCorrectAnswer","_useState11","_useState12","newExplanation","setNewExplanation","_useState13","_useState14","newSingleLink","setNewSingleLink","_useState15","_useState16","newSource","setNewSource","_useState17","_useState18","newExplanationLinks","setNewExplanationLinks","_useState19","_useState20","newCategory","setNewCategory","_useState21","_useState22","newLevel","setNewLevel","_useState23","_useState24","showToast","setShowToast","_useState25","_useState26","toastMsg","setToastMsg","toggleShowToast","_useState27","_useState28","showAlert","setShowAlert","_useState29","_useState30","alertMsg","setAlertMsg","toggleShowAlert","_useState31","_useState32","validated","setValidated","_useState33","_useState34","showModal","setShowModal","_useState35","_useState36","modalMsg","setModalMsg","handleClose","handleShow","AllQ","state","questionsAnswers","newQuestionid","id","Questionid","length","_useState37","_useState38","imageUrls","setImageUrls","_useState39","_useState40","newSingleQImageAltText","setNewSingleQImageAltText","_useState41","_useState42","newQuestionImageAltText","setNewQuestionImageAltText","_useState43","_useState44","imageUpload","setImageUpload","imagesListRef","concat","uploadFile","imageRef","name","then","snapshot","url","prev","_toConsumableArray","response","items","forEach","item","trim","_useState45","_useState46","eimageUrls","seteImageUrls","_useState47","_useState48","newSingleExpImageAltText","setNewSingleExpImageAltText","_useState49","_useState50","newExplanationImageAltText","setNewExplanationImageAltText","_useState51","_useState52","eimageUpload","seteImageUpload","eimagesListRef","euploadFile","handleSubmit","evt","preventDefault","question","questionImage","questionImageAltText","answerOptions","correctAnswer","explanation","explanationImage","explanationImageAltText","explanationLinks","category","level","clearText","text","target","value","createElement","Fragment","animated","now","className","position","bg","show","onClose","delay","autohide","animation","Header","style","fontSize","Body","variant","dismissible","Heading","maxWidth","noValidate","onSubmit","Group","as","controlId","Label","Control","required","rows","placeholder","defaultValue","onChange","e","onFocus","type","files","Text","onClick","size","bordered","responsive","tableLayout","textAlign","background","color","fontWeight","borderTop","map","link","linkIdx","key","href","src","width","height","currentText","idx","filter","currentLink","option","optionIdx","currentOption","Select","slice","indexOf","lastIndexOf","onHide","Footer","initializeApp","getAnalytics","getStorage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics"],"sourceRoot":""}