{"version":3,"file":"client_features_singleQuestion_EditQA_js.bundle.js","mappings":"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","sources":["webpack://medexperts.io/./client/features/addQ/firebase.js","webpack://medexperts.io/./client/features/doesNotExist/NoExist.js","webpack://medexperts.io/./client/features/singleQuestion/EditQA.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getStorage } from \"firebase/storage\";\n// require proces\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7N-A9S6LI4jZE9DIqHemMF11ISeY_dgQ\",\n  authDomain: \"medexpertsio-a0906.firebaseapp.com\",\n  projectId: \"medexpertsio-a0906\",\n  storageBucket: \"medexpertsio-a0906.appspot.com\",\n  messagingSenderId: \"970371423179\",\n  appId: \"1:970371423179:web:e5321a068eb1ec5fdbf44e\",\n  measurementId: \"G-EMH2T6VRSW\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nexport const storage = getStorage(app);\n","import React, { useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap/\";\n\nconst NoExist = () => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 500);\n  }, []);\n\n  return (\n    <div>\n      {loading ? (\n        <ProgressBar animated now={100} />\n      ) : (\n        <div className=\"nofound\">\n          <h1>Page Not Found</h1>\n          <p>We're sorry, but the page you requested could not be found.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NoExist;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Form,\n  Row,\n  Col,\n  Container,\n  Card,\n  Button,\n  Modal,\n  InputGroup,\n  Toast,\n  ToastContainer,\n  Table,\n  ProgressBar,\n  Alert,\n} from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { fetchQAVersions, editQuestion } from \"./singleQuestionSlice\";\nimport { v4 } from \"uuid\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ref, uploadBytes, getDownloadURL, listAll } from \"firebase/storage\";\nimport { storage } from \"../addQ/firebase\";\nimport NoExist from \"../doesNotExist/NoExist\";\n\nconst EditQA = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { singleQuestionId } = useParams();\n  useEffect(() => {\n    dispatch(fetchQAVersions(singleQuestionId));\n  }, []);\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 500);\n  }, []);\n\n  const qaVersions = useSelector((state) => state.SingleQuestion.qaAllVersions);\n\n  const [newQuestion, setNewQuestion] = useState(qaVersions[0]?.question);\n  const [newQuestionImage, setNewQuestionImage] = useState(\n    qaVersions[0]?.questionImage\n  );\n\n  const [newSingleQImageAltText, setNewSingleQImageAltText] = useState(\"\");\n  const [newQuestionImageAltText, setNewQuestionImageAltText] = useState(\n    qaVersions[0]?.questionImageAltText.slice()\n  );\n\n  const [newSingleOption, setNewSingleOption] = useState(\"\");\n  const [newAnswerOptions, setNewAnswerOptions] = useState(\n    qaVersions[0]?.answerOptions\n  );\n  const [newCorrectAnswer, setNewCorrectAnswer] = useState(\n    qaVersions[0]?.correctAnswer\n  );\n  const [newExplanation, setNewExplanation] = useState(\n    qaVersions[0]?.explanation\n  );\n  const [newExplanationImage, setNewExplanationImage] = useState(\n    qaVersions[0]?.explanationImage\n  );\n  const [newSingleExpImageAltText, setNewSingleExpImageAltText] = useState(\"\");\n  const [newExplanationImageAltText, setNewExplanationImageAltText] = useState(\n    qaVersions[0]?.explanationImageAltText.slice()\n  );\n\n  const [newSingleLink, setNewSingleLink] = useState(\"\");\n  const [newSource, setNewSource] = useState(\"\");\n  const [newExplanationLinks, setNewExplanationLinks] = useState(\n    qaVersions[0]?.explanationLinks\n  );\n  const [newCategory, setNewCategory] = useState(qaVersions[0]?.category);\n  const [newLevel, setNewLevel] = useState(qaVersions[0]?.level);\n\n  useEffect(() => {\n    setNewQuestion(qaVersions[0]?.question);\n    setNewQuestionImage(qaVersions[0]?.questionImage);\n    setNewQuestionImageAltText(qaVersions[0]?.questionImageAltText.slice());\n    setNewAnswerOptions(qaVersions[0]?.answerOptions);\n    setNewCorrectAnswer(qaVersions[0]?.correctAnswer);\n    setNewExplanation(qaVersions[0]?.explanation);\n    setNewExplanationImage(qaVersions[0]?.explanationImage);\n    setNewExplanationImageAltText(\n      qaVersions[0]?.explanationImageAltText.slice()\n    );\n    setNewExplanationLinks(qaVersions[0]?.explanationLinks);\n    setNewCategory(qaVersions[0]?.category);\n    setNewLevel(qaVersions[0]?.level);\n  }, [qaVersions]); // set the relation between redux store's qaVersions and local state\n\n  //------------ toast details\n  const [showToast, setShowToast] = useState(false);\n  const [toastMsg, setToastMsg] = useState(\"\");\n  const toggleShowToast = () => setShowToast(!showToast);\n  //----------- end toast details\n\n  //------------ alert details\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMsg, setAlertMsg] = useState(\"\");\n  const toggleShowAlert = () => setShowAlert(!showAlert);\n  //----------- end alert details\n\n  //------------ modal details\n  const [showModal, setShowModal] = useState(false);\n  const handleClose = () => {\n    setShowModal(false);\n  };\n  const handleShow = () => setShowModal(true);\n  //----------- end modal details\n\n  //Question Images\n  const [imageUpload, setImageUpload] = useState(null);\n  const uploadFile = () => {\n    if (imageUpload == null) return;\n    const imageRef = ref(\n      storage,\n      `images/${qaVersions[0]?.id}/${imageUpload.name + v4()}`\n    );\n    uploadBytes(imageRef, imageUpload).then((snapshot) => {\n      getDownloadURL(snapshot.ref).then((url) => {\n        setNewQuestionImage((prev) => [...prev, url]);\n      });\n    });\n\n    listAll(`images/${qaVersions[0]?.id}/${imageUpload.name + v4()}`).then(\n      (response) => {\n        response.items.forEach((item) => {\n          getDownloadURL(item).then((url) => {\n            setNewQuestionImage((prev) => [...prev, url]);\n          });\n        });\n      }\n    );\n    newQuestionImageAltText[newQuestionImage.length] =\n      newSingleQImageAltText.trim();\n  };\n\n  //Explanation Images\n  const [eimageUpload, seteImageUpload] = useState(null);\n  const euploadFile = () => {\n    if (eimageUpload == null) return;\n    const imageRef = ref(\n      storage,\n      `images/${qaVersions[0]?.id}/explanation/${eimageUpload.name + v4()}`\n    );\n    uploadBytes(imageRef, eimageUpload).then((snapshot) => {\n      getDownloadURL(snapshot.ref).then((url) => {\n        setNewExplanationImage((prev) => [...prev, url]);\n      });\n    });\n\n    listAll(\n      `images/${qaVersions[0]?.id}/explanation/${eimageUpload.name + v4()}`\n    ).then((response) => {\n      response.items.forEach((item) => {\n        getDownloadURL(item).then((url) => {\n          setNewExplanationImage((prev) => [...prev, url]);\n        });\n      });\n    });\n    newExplanationImageAltText[newExplanationImage.length] =\n      newSingleExpImageAltText.trim();\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    dispatch(\n      editQuestion({\n        id: qaVersions[0]?.id,\n        question: newQuestion.trim(),\n        questionImage: newQuestionImage,\n        questionImageAltText: newQuestionImageAltText,\n        answerOptions: newAnswerOptions,\n        correctAnswer: newCorrectAnswer,\n        explanation: newExplanation.trim(),\n        explanationImage: newExplanationImage,\n        explanationImageAltText: newExplanationImageAltText,\n        explanationLinks: newExplanationLinks,\n        category: newCategory,\n        level: newLevel,\n        ancestorId: qaVersions[0]?.ancestorId || qaVersions[0]?.id,\n        displayId:\n          qaVersions[0]?.displayId ||\n          qaVersions[0]?.ancestorId ||\n          qaVersions[0]?.id,\n      })\n    );\n  };\n\n  const fillField = (evt, text) => {\n    evt.target.value = text;\n  };\n\n  if (qaVersions && qaVersions.length) {\n    return (\n      <>\n        {loading ? (\n          <ProgressBar animated now={100} />\n        ) : (\n          <Container>\n            <Row className=\"p-5\">\n              <ToastContainer className=\"p-3\" position=\"middle-end\">\n                <Toast\n                  bg=\"success\"\n                  show={showToast}\n                  onClose={toggleShowToast}\n                  delay={5000}\n                  autohide\n                  animation={true}\n                >\n                  <Toast.Header>\n                    <strong\n                      className=\"me-auto\"\n                      style={{\n                        fontSize: \"150%\",\n                      }}\n                    >\n                      Saved!\n                    </strong>\n                  </Toast.Header>\n                  <Toast.Body\n                    style={{\n                      fontSize: \"150%\",\n                    }}\n                  >\n                    {toastMsg}\n                  </Toast.Body>\n                </Toast>\n              </ToastContainer>\n              <Alert\n                variant=\"danger\"\n                dismissible\n                show={showAlert}\n                onClose={toggleShowAlert}\n              >\n                <Alert.Heading>\n                  <strong>Alert!</strong>\n                </Alert.Heading>\n                <p>{alertMsg}</p>\n              </Alert>\n              <Card\n                className=\"mx-auto\"\n                style={{ maxWidth: \"900px\", padding: \"0px\" }}\n              >\n                <Card.Header\n                  style={{\n                    fontWeight: \"bold\",\n                    fontSize: \"150%\",\n                    padding: \"0px\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  Edit Question\n                </Card.Header>\n                <Card.Body>\n                  <Col>\n                    <Form onSubmit={handleSubmit}>\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"question\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">\n                              Question {qaVersions[0]?.displayId}\n                            </strong>\n                          </Form.Label>\n                          <Form.Control\n                            as=\"textarea\"\n                            rows={3}\n                            defaultValue={newQuestion}\n                            onChange={(e) => {\n                              setNewQuestion(e.target.value);\n                            }}\n                          />\n                        </Form.Group>\n                      </Row>\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"questionImage\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">\n                              Question Figures\n                            </strong>\n                          </Form.Label>\n\n                          <InputGroup className=\"mb-3\">\n                            <Form.Control\n                              type=\"file\"\n                              onChange={(e) => {\n                                setImageUpload(e.target.files[0]);\n                              }}\n                              onFocus={() => setShowAlert(false)}\n                            />\n                            <InputGroup.Text>Alt Text</InputGroup.Text>\n                            <Form.Control\n                              type=\"text\"\n                              placeholder=\"Type alt text here\"\n                              defaultValue={newSingleQImageAltText}\n                              onChange={(e) => {\n                                setNewSingleQImageAltText(e.target.value);\n                              }}\n                              onFocus={() => setShowAlert(false)}\n                            />\n                            <Button\n                              variant=\"outline-secondary\"\n                              onClick={() => {\n                                if (\n                                  imageUpload &&\n                                  newSingleQImageAltText.trim() !== \"\"\n                                ) {\n                                  uploadFile();\n                                  setToastMsg(\n                                    `Image with alt text: \"${newSingleQImageAltText.trim()}\".`\n                                  );\n                                  setNewSingleQImageAltText(\"\");\n                                  toggleShowToast();\n                                } else {\n                                  setAlertMsg(\n                                    \"You must enter both Image and Alt Text.\"\n                                  );\n                                  toggleShowAlert();\n                                }\n                              }}\n                            >\n                              Upload\n                            </Button>\n                          </InputGroup>\n\n                          <Table\n                            size=\"sm\"\n                            bordered\n                            responsive\n                            style={{\n                              tableLayout: \"fixed\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            <thead\n                              style={{\n                                background: \"#eaecef\",\n                                color: \"#6c767d\",\n                              }}\n                            >\n                              <tr>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Figure #\n                                </th>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Preview\n                                </th>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Alt Text\n                                </th>\n                                <th></th>\n                              </tr>\n                            </thead>\n                            <tbody style={{ borderTop: \"none\" }}>\n                              {newQuestionImage?.map((link, linkIdx) => (\n                                <tr key={uuidv4()}>\n                                  <td>\n                                    {\" \"}\n                                    <a href={link} target=\"_blank\">\n                                      {\" \"}\n                                      {linkIdx + 1}\n                                    </a>\n                                  </td>\n                                  <td>\n                                    <img\n                                      src={link}\n                                      style={{\n                                        width: \"150px\",\n                                        height: \"100px\",\n                                      }}\n                                    />{\" \"}\n                                  </td>\n                                  <td>\n                                    <InputGroup className=\"mb-3\">\n                                      <Form.Control\n                                        as=\"textarea\"\n                                        rows={3}\n                                        onClick={(evt) => {\n                                          if (\n                                            newQuestionImageAltText[linkIdx] !==\n                                            undefined\n                                          ) {\n                                            fillField(\n                                              evt,\n                                              newQuestionImageAltText[linkIdx]\n                                            );\n                                          } else {\n                                            fillField(evt, \"\");\n                                          }\n                                        }}\n                                        defaultValue={\n                                          newQuestionImageAltText[linkIdx] ||\n                                          \" \"\n                                        }\n                                        onChange={(e) => {\n                                          newQuestionImageAltText[linkIdx] =\n                                            e.target.value;\n                                        }}\n                                        placeholder=\"Type alt text here\"\n                                        onFocus={() => setShowAlert(false)}\n                                      />\n                                      <Button\n                                        variant=\"outline-secondary\"\n                                        onClick={() => {\n                                          if (\n                                            newQuestionImageAltText[\n                                              linkIdx\n                                            ].trim() !== \"\"\n                                          ) {\n                                            setNewQuestionImageAltText(\n                                              newQuestionImageAltText?.map(\n                                                (currentText, idx) => {\n                                                  if (idx === linkIdx) {\n                                                    currentText =\n                                                      newQuestionImageAltText[\n                                                        linkIdx\n                                                      ].trim();\n                                                  }\n                                                  return currentText;\n                                                }\n                                              )\n                                            );\n                                            setToastMsg(\n                                              `Image with alt text: \"${newQuestionImageAltText[\n                                                linkIdx\n                                              ].trim()}\".`\n                                            );\n                                            toggleShowToast();\n                                          } else {\n                                            setAlertMsg(\n                                              `You must enter an alt text for the image here or 'Remove' this entire row.`\n                                            );\n                                            toggleShowAlert();\n                                          }\n                                        }}\n                                      >\n                                        Save\n                                      </Button>\n                                    </InputGroup>\n                                  </td>\n                                  <td>\n                                    {\" \"}\n                                    <Button\n                                      variant=\"outline-secondary\"\n                                      onClick={() => {\n                                        setNewQuestionImage(\n                                          newQuestionImage.filter(\n                                            (currentLink, idx) => {\n                                              return idx !== linkIdx;\n                                            }\n                                          )\n                                        );\n                                        setNewQuestionImageAltText(\n                                          newQuestionImageAltText.filter(\n                                            (currentText, idx) => {\n                                              return idx != linkIdx;\n                                            }\n                                          )\n                                        );\n                                      }}\n                                    >\n                                      Remove\n                                    </Button>\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </Table>\n                        </Form.Group>\n                      </Row>\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"answerOptions\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">Options</strong>\n                          </Form.Label>\n                          <InputGroup className=\"mb-3\">\n                            <Form.Control\n                              type=\"text\"\n                              placeholder=\"Type new multiple choice option here\"\n                              defaultValue={newSingleOption}\n                              onChange={(e) => {\n                                setNewSingleOption(e.target.value);\n                              }}\n                              onFocus={() => setShowAlert(false)}\n                            />\n                            <Button\n                              variant=\"outline-secondary\"\n                              onClick={() => {\n                                if (newSingleOption.trim() !== \"\") {\n                                  setNewAnswerOptions([\n                                    ...newAnswerOptions,\n                                    newSingleOption.trim(),\n                                  ]);\n                                  setToastMsg(newSingleOption.trim());\n                                  setNewSingleOption(\"\");\n                                  toggleShowToast();\n                                } else {\n                                  setAlertMsg(\n                                    \"You haven't added a new multiple choice option yet.\"\n                                  );\n                                  toggleShowAlert();\n                                }\n                              }}\n                            >\n                              Add\n                            </Button>\n                          </InputGroup>\n\n                          {newAnswerOptions?.map((option, optionIdx) => (\n                            <InputGroup className=\"mb-3\" key={uuidv4()}>\n                              <Form.Control\n                                type=\"text\"\n                                onClick={(evt) => {\n                                  fillField(evt, option);\n                                }}\n                                defaultValue={option}\n                                onChange={(e) => {\n                                  option = e.target.value;\n                                }}\n                                placeholder=\"Type multiple choice option\"\n                                onFocus={() => setShowAlert(false)}\n                              />\n                              <Button\n                                variant=\"outline-secondary\"\n                                onClick={() => {\n                                  if (option.trim() !== \"\") {\n                                    setNewAnswerOptions(\n                                      newAnswerOptions?.map(\n                                        (currentOption, idx) => {\n                                          if (idx === optionIdx) {\n                                            currentOption = option.trim();\n                                          }\n                                          return currentOption;\n                                        }\n                                      )\n                                    );\n\n                                    setToastMsg(option.trim());\n                                    toggleShowToast();\n                                  } else {\n                                    setAlertMsg(\n                                      `You must enter a multiple choice option here or 'Remove' this field`\n                                    );\n                                    toggleShowAlert();\n                                  }\n                                }}\n                              >\n                                Save\n                              </Button>\n                              <Button\n                                variant=\"outline-secondary\"\n                                onClick={() => {\n                                  setNewAnswerOptions(\n                                    newAnswerOptions.filter(\n                                      (currentOption, idx) => {\n                                        return idx !== optionIdx;\n                                      }\n                                    )\n                                  );\n                                }}\n                              >\n                                Remove\n                              </Button>\n                            </InputGroup>\n                          ))}\n                        </Form.Group>\n                      </Row>\n\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"correctAnswer\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">Answer</strong>\n                          </Form.Label>\n                          <Form.Select\n                            aria-label=\"Default select example\"\n                            onChange={(e) => {\n                              setNewCorrectAnswer(e.target.value);\n                            }}\n                          >\n                            <option defaultValue> {newCorrectAnswer}</option>\n                            {newAnswerOptions?.map((option) => (\n                              <option value={option} key={uuidv4()}>\n                                {option}\n                              </option>\n                            ))}\n                          </Form.Select>\n                        </Form.Group>\n                      </Row>\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"explanation\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">Explanation</strong>\n                          </Form.Label>\n                          <Form.Control\n                            as=\"textarea\"\n                            rows={3}\n                            defaultValue={newExplanation}\n                            onChange={(e) => {\n                              setNewExplanation(e.target.value);\n                            }}\n                          ></Form.Control>\n                        </Form.Group>\n                      </Row>\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"explanationImage\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">\n                              Explanation Figures\n                            </strong>\n                          </Form.Label>\n\n                          <InputGroup className=\"mb-3\">\n                            <Form.Control\n                              type=\"file\"\n                              onChange={(e) => {\n                                seteImageUpload(e.target.files[0]);\n                              }}\n                            />\n                            <InputGroup.Text>Alt Text</InputGroup.Text>\n                            <Form.Control\n                              type=\"text\"\n                              placeholder=\"Type alt text here\"\n                              defaultValue={newSingleExpImageAltText}\n                              onChange={(e) => {\n                                setNewSingleExpImageAltText(e.target.value);\n                              }}\n                              onFocus={() => setShowAlert(false)}\n                            />\n                            <Button\n                              variant=\"outline-secondary\"\n                              onClick={() => {\n                                if (\n                                  eimageUpload &&\n                                  newSingleExpImageAltText.trim() !== \"\"\n                                ) {\n                                  euploadFile();\n                                  setToastMsg(\n                                    `Image with alt text: \"${newSingleExpImageAltText.trim()}\".`\n                                  );\n                                  setNewSingleExpImageAltText(\"\");\n                                  toggleShowToast();\n                                } else {\n                                  setAlertMsg(\n                                    \"You must enter both Image and Alt Text.\"\n                                  );\n                                  toggleShowAlert();\n                                }\n                              }}\n                            >\n                              Upload\n                            </Button>\n                          </InputGroup>\n\n                          <Table\n                            size=\"sm\"\n                            bordered\n                            responsive\n                            style={{\n                              tableLayout: \"fixed\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            <thead\n                              style={{\n                                background: \"#eaecef\",\n                                color: \"#6c767d\",\n                              }}\n                            >\n                              <tr>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Figure #\n                                </th>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Preview\n                                </th>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Alt Text\n                                </th>\n                                <th></th>\n                              </tr>\n                            </thead>\n                            <tbody style={{ borderTop: \"none\" }}>\n                              {newExplanationImage?.map((link, linkIdx) => (\n                                <tr key={uuidv4()}>\n                                  <td>\n                                    {\" \"}\n                                    <a href={link} target=\"_blank\">\n                                      {\" \"}\n                                      {linkIdx + 1}\n                                    </a>\n                                  </td>\n                                  <td>\n                                    <img\n                                      src={link}\n                                      style={{\n                                        width: \"150px\",\n                                        height: \"100px\",\n                                      }}\n                                    />{\" \"}\n                                  </td>\n                                  <td>\n                                    <InputGroup className=\"mb-3\">\n                                      <Form.Control\n                                        as=\"textarea\"\n                                        rows={3}\n                                        onClick={(evt) => {\n                                          if (\n                                            newExplanationImageAltText[\n                                              linkIdx\n                                            ] !== undefined\n                                          ) {\n                                            fillField(\n                                              evt,\n                                              newExplanationImageAltText[\n                                                linkIdx\n                                              ]\n                                            );\n                                          } else {\n                                            fillField(evt, \"\");\n                                          }\n                                        }}\n                                        defaultValue={\n                                          newExplanationImageAltText[linkIdx] ||\n                                          \" \"\n                                        }\n                                        onChange={(e) => {\n                                          newExplanationImageAltText[linkIdx] =\n                                            e.target.value;\n                                        }}\n                                        placeholder=\"Type alt text here\"\n                                        onFocus={() => setShowAlert(false)}\n                                      />\n                                      <Button\n                                        variant=\"outline-secondary\"\n                                        onClick={() => {\n                                          if (\n                                            newExplanationImageAltText[\n                                              linkIdx\n                                            ].trim() !== \"\"\n                                          ) {\n                                            setNewExplanationImageAltText(\n                                              newExplanationImageAltText?.map(\n                                                (currentText, idx) => {\n                                                  if (idx === linkIdx) {\n                                                    currentText =\n                                                      newExplanationImageAltText[\n                                                        linkIdx\n                                                      ].trim();\n                                                  }\n                                                  return currentText;\n                                                }\n                                              )\n                                            );\n                                            setToastMsg(\n                                              `Image with alt text: \"${newExplanationImageAltText[\n                                                linkIdx\n                                              ].trim()}\".`\n                                            );\n                                            toggleShowToast();\n                                          } else {\n                                            setAlertMsg(\n                                              `You must enter an alt text for the image here or 'Remove' this entire row.`\n                                            );\n                                            toggleShowAlert();\n                                          }\n                                        }}\n                                      >\n                                        Save\n                                      </Button>\n                                    </InputGroup>\n                                  </td>\n                                  <td>\n                                    {\" \"}\n                                    <Button\n                                      variant=\"outline-secondary\"\n                                      onClick={() => {\n                                        setNewExplanationImage(\n                                          newExplanationImage.filter(\n                                            (currentLink, idx) => {\n                                              return idx !== linkIdx;\n                                            }\n                                          )\n                                        );\n                                        setNewExplanationImageAltText(\n                                          newExplanationImageAltText.filter(\n                                            (currentText, idx) => {\n                                              return idx != linkIdx;\n                                            }\n                                          )\n                                        );\n                                      }}\n                                    >\n                                      Remove\n                                    </Button>\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </Table>\n                        </Form.Group>\n                      </Row>\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"explanationLinks\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">\n                              Explanation Sources\n                            </strong>\n                          </Form.Label>\n                          <InputGroup className=\"mb-3\">\n                            <InputGroup.Text>Link</InputGroup.Text>\n                            <Form.Control\n                              aria-label=\"Link\"\n                              type=\"text\"\n                              placeholder=\"Type link here\"\n                              defaultValue={newSingleLink}\n                              onChange={(e) => {\n                                setNewSingleLink(e.target.value);\n                              }}\n                              onFocus={() => setShowAlert(false)}\n                            />\n                            <InputGroup.Text>Citation</InputGroup.Text>\n                            <Form.Control\n                              aria-label=\"Citation\"\n                              type=\"text\"\n                              placeholder=\"Type citation here\"\n                              defaultValue={newSource}\n                              onChange={(e) => {\n                                setNewSource(e.target.value);\n                              }}\n                              onFocus={() => setShowAlert(false)}\n                            />\n                            <Button\n                              variant=\"outline-secondary\"\n                              onClick={() => {\n                                if (\n                                  newSingleLink.trim() !== \"\" &&\n                                  newSource.trim() !== \"\"\n                                ) {\n                                  setNewExplanationLinks([\n                                    ...newExplanationLinks,\n                                    `<a href=\"` +\n                                      newSingleLink.trim() +\n                                      `\" target=\"_blank\">` +\n                                      newSource.trim() +\n                                      `</a`,\n                                  ]);\n                                  setToastMsg(\n                                    `Citation: ${newSource.trim()} \\n Link: ${newSingleLink.trim()}`\n                                  );\n                                  setNewSingleLink(\"\");\n                                  setNewSource(\"\");\n                                  toggleShowToast();\n                                } else {\n                                  setAlertMsg(\n                                    \"You must enter both Link and Citation.\"\n                                  );\n                                  toggleShowAlert();\n                                }\n                              }}\n                            >\n                              Add\n                            </Button>\n                          </InputGroup>\n\n                          <Table\n                            size=\"sm\"\n                            bordered\n                            responsive\n                            style={{\n                              tableLayout: \"fixed\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            <thead\n                              style={{\n                                background: \"#eaecef\",\n                                color: \"#6c767d\",\n                              }}\n                            >\n                              <tr>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Link\n                                </th>\n                                <th\n                                  style={{\n                                    fontWeight: \"normal\",\n                                  }}\n                                >\n                                  Citation\n                                </th>\n                                <th></th>\n                              </tr>\n                            </thead>\n                            <tbody style={{ borderTop: \"none\" }}>\n                              {newExplanationLinks?.map((link, linkIdx) => (\n                                <tr key={uuidv4()}>\n                                  <td>\n                                    {\" \"}\n                                    {link.slice(9, link.indexOf(\">\") - 17)}\n                                  </td>\n                                  <td>\n                                    {link.slice(\n                                      link.indexOf(\">\") + 1,\n                                      link.lastIndexOf(\"<\")\n                                    )}\n                                  </td>\n                                  <td>\n                                    {\" \"}\n                                    <Button\n                                      variant=\"outline-secondary\"\n                                      onClick={() => {\n                                        setNewExplanationLinks(\n                                          newExplanationLinks.filter(\n                                            (currentLink, idx) => {\n                                              return idx !== linkIdx;\n                                            }\n                                          )\n                                        );\n                                      }}\n                                    >\n                                      Remove\n                                    </Button>\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </Table>\n                        </Form.Group>\n                      </Row>\n                      <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"category\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">Category</strong>\n                          </Form.Label>\n                          <Form.Select\n                            aria-label=\"default select example\"\n                            onChange={(e) => {\n                              setNewCategory(e.target.value);\n                            }}\n                          >\n                            <option defaultValue>\n                              {\" \"}\n                              {qaVersions[0]?.category}\n                            </option>\n                            <option value=\"Asthma\">Asthma</option>\n                            <option value=\"Bronchiectasis\">\n                              Bronchiectasis\n                            </option>\n                            <option value=\"Chronic Obstructive Pulmonary Disease\">\n                              Chronic Obstructive Pulmonary Disease\n                            </option>\n                            <option value=\"Critical Care\">Critical Care</option>\n                            <option value=\"Infection\">Infection</option>\n                            <option value=\"Interstitial Lung Diseases\">\n                              Interstitial Lung Diseases\n                            </option>\n                            <option value=\"Lung Transplant\">\n                              Lung Transplant\n                            </option>\n                            <option value=\"Lung Cancer\">Lung Cancer</option>\n                            <option value=\"Mediastinal Disorders\">\n                              Mediastinal Disorders\n                            </option>\n                            <option value=\"Other Pulmonary Diseases\">\n                              Other Pulmonary Diseases\n                            </option>\n                            <option value=\"Pharmacology\">Pharmacology</option>\n                            <option value=\"Pleural Diseases\">\n                              Pleural Diseases\n                            </option>\n                            <option value=\"Pulmonary Function Testing\">\n                              Pulmonary Function Testing\n                            </option>\n                            <option value=\"Pulmonary Vascular Disease\">\n                              Pulmonary Vascular Disease\n                            </option>\n                            <option value=\"Sleep\">Sleep</option>\n                          </Form.Select>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"level\">\n                          <Form.Label className=\"\">\n                            <strong className=\"me-auto\">Level</strong>\n                          </Form.Label>\n                          <Form.Select\n                            aria-label=\"default select example\"\n                            onChange={(e) => {\n                              setNewLevel(e.target.value);\n                            }}\n                          >\n                            <option defaultValue>\n                              {\" \"}\n                              {qaVersions[0]?.level}\n                            </option>\n                            <option value=\"Easy\">Easy</option>\n                            <option value=\"Moderate\">Moderate</option>\n                            <option value=\"Hard\">Hard</option>\n                          </Form.Select>\n                        </Form.Group>\n                      </Row>\n                      <center>\n                        <Button\n                          type=\"submit\"\n                          variant=\"secondary\"\n                          onClick={handleShow}\n                        >\n                          Update\n                        </Button>\n                      </center>\n                      <Modal show={showModal} onHide={handleClose}>\n                        <Modal.Body>\n                          Your changes have been recorded!\n                        </Modal.Body>\n                        <Modal.Footer>\n                          {/* <Button variant=\"secondary\" onClick={handleClose}>\n                            Keep Editing\n                          </Button> */}\n                          <Button\n                            variant=\"secondary\"\n                            onClick={() => {\n                              navigate(`/questions/${qaVersions[0].id}`);\n                            }}\n                          >\n                            View Question\n                          </Button>\n                        </Modal.Footer>\n                      </Modal>\n                    </Form>\n                  </Col>\n                </Card.Body>\n              </Card>\n            </Row>\n          </Container>\n        )}\n      </>\n    );\n  } else {\n    return <NoExist />;\n  }\n};\n\nexport default EditQA;\n"],"names":["initializeApp","getAnalytics","getStorage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","storage","React","useEffect","useState","ProgressBar","NoExist","_useState","_useState2","_slicedToArray","loading","setLoading","setTimeout","createElement","animated","now","className","useDispatch","useSelector","Form","Row","Col","Container","Card","Button","Modal","InputGroup","Toast","ToastContainer","Table","Alert","useParams","useNavigate","fetchQAVersions","editQuestion","v4","uuidv4","ref","uploadBytes","getDownloadURL","listAll","EditQA","_qaVersions$","_qaVersions$2","_qaVersions$3","_qaVersions$4","_qaVersions$5","_qaVersions$6","_qaVersions$7","_qaVersions$8","_qaVersions$9","_qaVersions$10","_qaVersions$11","dispatch","navigate","_useParams","singleQuestionId","qaVersions","state","SingleQuestion","qaAllVersions","_useState3","question","_useState4","newQuestion","setNewQuestion","_useState5","questionImage","_useState6","newQuestionImage","setNewQuestionImage","_useState7","_useState8","newSingleQImageAltText","setNewSingleQImageAltText","_useState9","questionImageAltText","slice","_useState10","newQuestionImageAltText","setNewQuestionImageAltText","_useState11","_useState12","newSingleOption","setNewSingleOption","_useState13","answerOptions","_useState14","newAnswerOptions","setNewAnswerOptions","_useState15","correctAnswer","_useState16","newCorrectAnswer","setNewCorrectAnswer","_useState17","explanation","_useState18","newExplanation","setNewExplanation","_useState19","explanationImage","_useState20","newExplanationImage","setNewExplanationImage","_useState21","_useState22","newSingleExpImageAltText","setNewSingleExpImageAltText","_useState23","explanationImageAltText","_useState24","newExplanationImageAltText","setNewExplanationImageAltText","_useState25","_useState26","newSingleLink","setNewSingleLink","_useState27","_useState28","newSource","setNewSource","_useState29","explanationLinks","_useState30","newExplanationLinks","setNewExplanationLinks","_useState31","category","_useState32","newCategory","setNewCategory","_useState33","level","_useState34","newLevel","setNewLevel","_qaVersions$12","_qaVersions$13","_qaVersions$14","_qaVersions$15","_qaVersions$16","_qaVersions$17","_qaVersions$18","_qaVersions$19","_qaVersions$20","_qaVersions$21","_qaVersions$22","_useState35","_useState36","showToast","setShowToast","_useState37","_useState38","toastMsg","setToastMsg","toggleShowToast","_useState39","_useState40","showAlert","setShowAlert","_useState41","_useState42","alertMsg","setAlertMsg","toggleShowAlert","_useState43","_useState44","showModal","setShowModal","handleClose","handleShow","_useState45","_useState46","imageUpload","setImageUpload","uploadFile","_qaVersions$23","_qaVersions$24","imageRef","concat","id","name","then","snapshot","url","prev","_toConsumableArray","response","items","forEach","item","length","trim","_useState47","_useState48","eimageUpload","seteImageUpload","euploadFile","_qaVersions$25","_qaVersions$26","handleSubmit","evt","_qaVersions$27","_qaVersions$28","_qaVersions$29","_qaVersions$30","_qaVersions$31","_qaVersions$32","preventDefault","ancestorId","displayId","fillField","text","target","value","_qaVersions$33","_qaVersions$34","_qaVersions$35","Fragment","position","bg","show","onClose","delay","autohide","animation","Header","style","fontSize","Body","variant","dismissible","Heading","maxWidth","padding","fontWeight","textAlign","onSubmit","Group","as","controlId","Label","Control","rows","defaultValue","onChange","e","type","files","onFocus","Text","placeholder","onClick","size","bordered","responsive","tableLayout","background","color","borderTop","map","link","linkIdx","key","href","src","width","height","undefined","currentText","idx","filter","currentLink","option","optionIdx","currentOption","Select","indexOf","lastIndexOf","onHide","Footer"],"sourceRoot":""}