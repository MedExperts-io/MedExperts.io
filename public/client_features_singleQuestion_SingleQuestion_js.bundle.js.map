{"version":3,"file":"client_features_singleQuestion_SingleQuestion_js.bundle.js","mappings":"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","sources":["webpack://medexperts.io/./client/features/singleQuestion/SingleQAadmin.js","webpack://medexperts.io/./client/features/singleQuestion/SingleQuestion.js"],"sourcesContent":["import DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport parse from \"html-react-parser\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Accordion,\n  Breadcrumb,\n  Button,\n  Card,\n  Container,\n  Modal,\n  ProgressBar,\n  Stack,\n  Tab,\n  Table,\n  Tabs,\n} from \"react-bootstrap/\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { deleteSingleQuestion, fetchQAVersions } from \"./singleQuestionSlice\";\n\nconst SingleQAadmin = () => {\n  const { singleQuestionId } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [key, setKey] = useState(newestVersion?.id);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 500);\n  }, []);\n\n  useEffect(() => {\n    dispatch(fetchQAVersions(singleQuestionId));\n  }, [qaVersions]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const qaVersions = useSelector((state) => state.SingleQuestion.qaAllVersions);\n\n  const newestVersion = qaVersions[0];\n  const allOtherVersions = qaVersions.slice(1);\n\n  const responseData = (qaId, ansOption) => {\n    let numOfPicks = 0;\n    let totalResponses = 0;\n    const userResponses = qaVersions.map((aVersion) => {\n      if (aVersion.id == qaId) {\n        aVersion.user_questions?.map((eachUserInput) => {\n          totalResponses++;\n          if (eachUserInput.userInput == ansOption) {\n            numOfPicks++;\n          }\n        });\n      }\n    });\n    if (numOfPicks !== 0) {\n      return Math.round((numOfPicks * 100) / totalResponses);\n    } else {\n      return null;\n    }\n  };\n\n  //------------ Delete modal details\n  const [deleteId, setDeleteId] = useState(null);\n  const [deletePosition, setDeletePosition] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  const handleShow = (id, position) => {\n    //Step2: handleShow sets state with provided id & position & shows modal\n    setDeleteId(id);\n    setDeletePosition(position);\n    setShow(true);\n  };\n  const handleClose = () => setShow(false);\n\n  const handleDelete = (id, position) => {\n    //Step4: Based on position, delete dispatched & navigation called.\n    dispatch(deleteSingleQuestion(id));\n    if (position === \"only\") {\n      navigate(`/questions`);\n    } else if (position === \"newest\") {\n      setKey();\n      navigate(`/questions/${qaVersions[1].id}`);\n    } else if (position === \"older\") {\n      setKey(newestVersion?.id);\n    }\n    handleClose(); //Step5: Modal closed\n  };\n  //----------- end Delete modal details\n\n  return (\n    <Container fluid>\n      {loading ? (\n        <ProgressBar animated now={100} />\n      ) : (\n        <Stack gap={3} className=\"p-3\">\n          <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n              <Modal.Title>\n                Delete version with unique ID {deleteId}?\n              </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              Once you delete, the previous version of this question will be\n              activated. If no other versions exist, you will be redirected to\n              the Questions page.\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button\n                variant=\"danger\"\n                onClick={() => {\n                  //Step3: Final delete button clicked and handleDelete function called with deleteId and deletePosition from state\n                  handleDelete(deleteId, deletePosition);\n                }}\n              >\n                Delete\n              </Button>\n            </Modal.Footer>\n          </Modal>\n          <div>\n            {qaVersions && qaVersions?.length ? (\n              <div>\n                <Breadcrumb>\n                  <Breadcrumb.Item href=\"/questions\" id=\"breadcrumb\">\n                    All Questions\n                  </Breadcrumb.Item>\n                  <Breadcrumb.Item id=\"breadcrumb\" active>\n                    Question {qaVersions[0].displayId}\n                  </Breadcrumb.Item>\n                </Breadcrumb>\n                {qaVersions.length === 1 ? (\n                  qaVersions.map((eachVersion, idx) => (\n                    <Card\n                      className=\"mb-4 mx-auto\"\n                      key={uuidv4()}\n                      style={{ width: \"100%\" }}\n                    >\n                      <Card.Header\n                        style={{ fontSize: \"75%\", color: \"red\" }}\n                        id=\"no-border\"\n                        className=\"d-flex justify-content-end\"\n                      >\n                        Unique ID: {eachVersion.id}\n                      </Card.Header>\n                      <Card.Header\n                        id=\"no-border\"\n                        className=\"text-center \"\n                        style={{\n                          fontSize: \"100%\",\n                          textAlign: \"center\",\n                        }}\n                      >\n                        Question {qaVersions[0].displayId}:{\" \"}\n                        {eachVersion.question}\n                      </Card.Header>\n                      <Card.Header\n                        id=\"no-border\"\n                        className=\"d-flex justify-content-center\"\n                      >\n                        <Stack\n                          direction=\"horizontal\"\n                          style={{ paddingTop: \"10px\" }}\n                        >\n                          {eachVersion.questionImage\n                            ? eachVersion.questionImage.map((image, index) => (\n                                <Table\n                                  responsive=\"sm\"\n                                  size=\"sm\"\n                                  key={uuidv4()}\n                                  borderless\n                                  style={{ paddingBottom: \"0px\" }}\n                                >\n                                  <thead>\n                                    <tr>\n                                      <th style={{ padding: \"0px\" }}>\n                                        {\" \"}\n                                        <img\n                                          alt={\n                                            eachVersion.questionImageAltText\n                                              ? eachVersion\n                                                  .questionImageAltText[index]\n                                              : \"We're missing an explanation here, contact us!\"\n                                          }\n                                          src={image}\n                                          style={{\n                                            paddingLeft: \"10px\",\n                                            maxHeight: `12rem`,\n                                            maxInlineSize: \"100%\",\n                                          }}\n                                        />\n                                      </th>\n                                    </tr>\n                                  </thead>\n                                  <tbody>\n                                    <tr>\n                                      <td\n                                        className=\"text-center\"\n                                        style={{ fontSize: \"10px\" }}\n                                      >\n                                        Figure:{index + 1}\n                                      </td>\n                                    </tr>\n                                  </tbody>\n                                </Table>\n                              ))\n                            : null}\n                        </Stack>\n                      </Card.Header>\n                      <Card.Header\n                        className=\"d-flex justify-content-end\"\n                        style={{ paddingTop: \"0\" }}\n                      >\n                        <Button tabIndex={-1} size=\"small\" variant=\"link\">\n                          <Link\n                            to={`/questions/${singleQuestionId}/edit`}\n                            style={{ color: \"#1362d8\", textDecoration: `none` }}\n                          >\n                            {\" \"}\n                            <EditIcon />\n                            Edit Question{\" \"}\n                          </Link>\n                        </Button>\n                        {/* <---------------End edit q btn----------------> */}\n\n                        <Button\n                          variant=\"link\"\n                          size=\"small\"\n                          style={{ color: \"#1362d8\" }}\n                          onClick={() => handleShow(eachVersion.id, \"only\")} //Step1: Delete icon clicked and specific id & position passed to handleShow function\n                        >\n                          {\" \"}\n                          <DeleteIcon />\n                          Delete Version\n                        </Button>\n                        {/* <------------------End delete q Btn---------------> */}\n                      </Card.Header>\n\n                      <Stack>\n                        <Card\n                          className=\"mx-auto\"\n                          id=\"no-border\"\n                          style={{ minWidth: \"50%\" }}\n                        >\n                          <Table responsive=\"sm\" borderless>\n                            <thead>\n                              <tr>\n                                <th>Answer Options</th>\n                                <th>Responses</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <style type=\"text/css\">\n                                {`\n    .btn-success {\n      background-color: #7cb69d;\n      border-color:#7cb69d;\n      color: white;\n    }\n    .btn-danger{\n      background-color: #FF7276;\n      border-color: #FF7276;\n    }\n\n    `}\n                              </style>\n                              {eachVersion.answerOptions\n                                ? eachVersion.answerOptions.map(\n                                    (ans, index) => (\n                                      <tr key={uuidv4()}>\n                                        <td>\n                                          <Button\n                                            tabIndex=\"-1\"\n                                            style={{ margin: \"0\" }}\n                                            variant={\n                                              ans === eachVersion.correctAnswer\n                                                ? \"outline-success\"\n                                                : \"outline-danger\"\n                                            }\n                                          >\n                                            {ans}\n                                          </Button>\n                                        </td>\n\n                                        <td>\n                                          <span className=\"visually-hidden\">{`${\n                                            responseData(eachVersion.id, ans)\n                                              ? responseData(\n                                                  eachVersion.id,\n                                                  ans\n                                                )\n                                              : 0\n                                          }%`}</span>\n                                          {\n                                            <ProgressBar\n                                              // title=\"Progress bar for responses\"\n                                              // aria-label=\"Progress bar for responses\"\n                                              // name=\"Progress bar for responses\"\n                                              aria-hidden=\"true\"\n                                              variant={\n                                                ans ===\n                                                eachVersion.correctAnswer\n                                                  ? \"success\"\n                                                  : \"danger\"\n                                              }\n                                              style={{\n                                                height: \"38px\",\n                                                minWidth: \"100%\",\n                                              }}\n                                              now={\n                                                // responseData(\n                                                //   eachVersion.id,\n                                                //   ans\n                                                // ) ||\n                                                // responseData(\n                                                //   eachVersion.id,\n                                                //   ans\n                                                // ) == \"0\"\n                                                //   ?\n                                                //     responseData(\n                                                //       eachVersion.id,\n                                                //       ans\n                                                //     )\n                                                //   : 100\n                                                100\n                                              }\n                                              label={`${\n                                                responseData(\n                                                  eachVersion.id,\n                                                  ans\n                                                )\n                                                  ? responseData(\n                                                      eachVersion.id,\n                                                      ans\n                                                    )\n                                                  : \"0\"\n                                                // : 0\n                                              }%`}\n                                            />\n                                          }\n                                        </td>\n                                      </tr>\n                                    )\n                                  )\n                                : null}\n                            </tbody>\n                          </Table>\n                        </Card>{\" \"}\n                        <Accordion>\n                          <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header>\n                              View Explanation\n                            </Accordion.Header>\n                            <Accordion.Body>\n                              {eachVersion.explanation}\n                              <Stack\n                                direction=\"horizontal\"\n                                style={{ paddingTop: \"10px\" }}\n                              >\n                                {eachVersion.explanationImage\n                                  ? eachVersion.explanationImage.map(\n                                      (image, index) => (\n                                        <Table\n                                          responsive=\"sm\"\n                                          size=\"sm\"\n                                          key={uuidv4()}\n                                          borderless\n                                          style={{ paddingBottom: \"0px\" }}\n                                        >\n                                          <thead>\n                                            <tr>\n                                              <th style={{ padding: \"0px\" }}>\n                                                {\" \"}\n                                                <img\n                                                  alt={\n                                                    eachVersion.explanationImageAltText\n                                                      ? eachVersion\n                                                          .explanationImageAltText[\n                                                          index\n                                                        ]\n                                                      : \"We're missing an explanation here, contact us!\"\n                                                  }\n                                                  src={image}\n                                                  style={{\n                                                    paddingLeft: \"10px\",\n                                                    maxHeight: `12rem`,\n                                                    maxInlineSize: \"100%\",\n                                                  }}\n                                                />\n                                              </th>\n                                            </tr>\n                                          </thead>\n                                          <tbody>\n                                            <tr>\n                                              <td\n                                                className=\"text-center\"\n                                                style={{ fontSize: \"10px\" }}\n                                              >\n                                                Figure:{index + 1}\n                                              </td>\n                                            </tr>\n                                          </tbody>\n                                        </Table>\n                                      )\n                                    )\n                                  : null}\n                              </Stack>\n                            </Accordion.Body>\n                          </Accordion.Item>\n                          <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header>View References</Accordion.Header>\n                            <Accordion.Body>\n                              {eachVersion.explanationLinks.length ? (\n                                eachVersion.explanationLinks.map(\n                                  (sourcelink, index) => (\n                                    <Card\n                                      key={uuidv4()}\n                                      className=\"m-2 text-decoration-none \"\n                                    >\n                                      <Card.Body>\n                                        {\" \"}\n                                        <div>\n                                          {index + 1}{\" \"}\n                                          <div>\n                                            {parse(sourcelink)}\n                                            <style>\n                                              {` a {\n                            color: inherit;\n                             text-decoration: none;}`}\n                                            </style>\n                                          </div>\n                                        </div>\n                                      </Card.Body>\n                                    </Card>\n                                  )\n                                )\n                              ) : (\n                                <p\n                                  style={{\n                                    fontSize: \"16px\",\n                                  }}\n                                >\n                                  No references available for this question.\n                                </p>\n                              )}\n                            </Accordion.Body>\n                          </Accordion.Item>\n                        </Accordion>\n                      </Stack>\n                    </Card>\n                  ))\n                ) : (\n                  // <---------------if more than 1 version-------------->\n\n                  <Tabs\n                    activeKey={key}\n                    onSelect={(k) => setKey(k)}\n                    id=\"uncontrolled-tab-example\"\n                    className=\"mb-3\"\n                  >\n                    <Tab\n                      eventKey={`${newestVersion.id}`}\n                      title=\"Current Version\"\n                    >\n                      <Stack gap={3} key={uuidv4()}>\n                        <Card\n                          className=\"mb-4 mx-auto\"\n                          style={{ width: \"100%\" }}\n                        >\n                          <Card.Header\n                            style={{ fontSize: \"75%\", color: \"red\" }}\n                            id=\"no-border\"\n                            className=\"d-flex justify-content-end\"\n                          >\n                            Unique ID: {newestVersion.id}\n                          </Card.Header>\n\n                          <Card.Header\n                            id=\"no-border\"\n                            className=\"text-center\"\n                            style={{\n                              fontSize: \"100%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            Question {newestVersion.displayId}:{\" \"}\n                            {newestVersion.question}\n                          </Card.Header>\n                          <Card.Header\n                            id=\"no-border\"\n                            className=\"d-flex justify-content-center\"\n                          >\n                            <Stack\n                              direction=\"horizontal\"\n                              style={{ paddingTop: \"10px\" }}\n                            >\n                              {newestVersion.questionImage\n                                ? newestVersion.questionImage.map(\n                                    (image, index) => (\n                                      <Table\n                                        responsive=\"sm\"\n                                        size=\"sm\"\n                                        key={uuidv4()}\n                                        borderless\n                                        style={{ paddingBottom: \"0px\" }}\n                                      >\n                                        <thead>\n                                          <tr>\n                                            <th style={{ padding: \"0px\" }}>\n                                              {\" \"}\n                                              <img\n                                                alt={\n                                                  newestVersion.questionImageAltText\n                                                    ? newestVersion\n                                                        .questionImageAltText[\n                                                        index\n                                                      ]\n                                                    : \"We're missing an explanation here, contact us!\"\n                                                }\n                                                src={image}\n                                                style={{\n                                                  paddingLeft: \"10px\",\n                                                  maxHeight: `12rem`,\n                                                  maxInlineSize: \"100%\",\n                                                }}\n                                              />\n                                            </th>\n                                          </tr>\n                                        </thead>\n\n                                        <tbody>\n                                          <tr>\n                                            <td\n                                              className=\"text-center\"\n                                              style={{\n                                                fontSize: \"10px\",\n                                                paddingLeft: \"10px\",\n                                              }}\n                                            >\n                                              Figure:{index + 1}\n                                            </td>\n                                          </tr>\n                                        </tbody>\n                                      </Table>\n                                    )\n                                  )\n                                : null}\n                            </Stack>\n                          </Card.Header>\n                          <Card.Header className=\"d-flex justify-content-end\">\n                            <Button tabIndex={-1} size=\"small\" variant=\"link\">\n                              <Link\n                                to={`/questions/${singleQuestionId}/edit`}\n                                style={{\n                                  color: \"#1362d8\",\n                                  textDecoration: `none`,\n                                }}\n                              >\n                                {\" \"}\n                                <EditIcon style={{ color: \"#1362d8\" }} />\n                                Edit Question{\" \"}\n                              </Link>\n                            </Button>\n\n                            {/* <---------------End edit q btn----------------> */}\n\n                            <Button\n                              variant=\"link\"\n                              size=\"small\"\n                              style={{\n                                color: \"#1362d8\",\n                                textDecoration: `none`,\n                              }}\n                              onClick={() =>\n                                handleShow(newestVersion.id, \"newest\")\n                              } //Step1: Delete icon clicked and specific id & position passed to handleShow function\n                            >\n                              {\" \"}\n                              <DeleteIcon />\n                              Delete Version\n                            </Button>\n                            {/* <------------------End delete q Btn---------------> */}\n                          </Card.Header>\n\n                          <Stack>\n                            <Card\n                              className=\"mx-auto\"\n                              id=\"no-border\"\n                              style={{ minWidth: \"50%\" }}\n                            >\n                              <Table responsive=\"sm\" borderless>\n                                <thead>\n                                  <tr>\n                                    <th>Answer Options</th>\n                                    <th>Responses</th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <style type=\"text/css\">\n                                    {`\n    .btn-success {\n      background-color: #7cb69d;\n      border-color:#7cb69d;\n      color: white;\n    }\n    .btn-danger{\n      background-color: #FF7276;\n      border-color: #FF7276;\n    }\n\n    `}\n                                  </style>\n                                  {newestVersion.answerOptions\n                                    ? newestVersion.answerOptions.map(\n                                        (ans, index) => (\n                                          <tr key={uuidv4()}>\n                                            <td>\n                                              <Button\n                                                tabIndex=\"-1\"\n                                                style={{ margin: \"0\" }}\n                                                variant={\n                                                  ans ===\n                                                  newestVersion.correctAnswer\n                                                    ? \"outline-success\"\n                                                    : \"outline-danger\"\n                                                }\n                                              >\n                                                {ans}\n                                              </Button>\n                                            </td>\n                                            <td>\n                                              <span className=\"visually-hidden\">{`${\n                                                responseData(\n                                                  newestVersion.id,\n                                                  ans\n                                                )\n                                                  ? responseData(\n                                                      newestVersion.id,\n                                                      ans\n                                                    )\n                                                  : 0\n                                              }%`}</span>\n                                              {\n                                                <ProgressBar\n                                                  // title=\"Progress bar for responses\"\n                                                  // aria-label=\"Progress bar for responses\"\n                                                  // name=\"Progress bar for responses\"\n                                                  aria-hidden=\"true\"\n                                                  variant={\n                                                    ans ===\n                                                    newestVersion.correctAnswer\n                                                      ? \"success\"\n                                                      : \"danger\"\n                                                  }\n                                                  style={{\n                                                    height: \"38px\",\n                                                    minWidth: \"100%\",\n                                                  }}\n                                                  now={\n                                                    // responseData(\n                                                    //   newestVersion.id,\n                                                    //   ans\n                                                    // ) ||\n                                                    // responseData(\n                                                    //   newestVersion.id,\n                                                    //   ans\n                                                    // ) == \"0\"\n                                                    //   ?\n                                                    //     responseData(\n                                                    //       newestVersion.id,\n                                                    //       ans\n                                                    //     )\n                                                    //   : 100\n                                                    100\n                                                  }\n                                                  label={`${\n                                                    responseData(\n                                                      newestVersion.id,\n                                                      ans\n                                                    )\n                                                      ? responseData(\n                                                          newestVersion.id,\n                                                          ans\n                                                        )\n                                                      : \"0\"\n                                                    // : 0\n                                                  }%`}\n                                                />\n                                              }\n                                            </td>\n                                          </tr>\n                                        )\n                                      )\n                                    : null}\n                                </tbody>\n                              </Table>{\" \"}\n                            </Card>\n                            <Accordion>\n                              <Accordion.Item eventKey=\"0\">\n                                <Accordion.Header>\n                                  View Explanation\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                  {newestVersion.explanation}\n                                  <Stack\n                                    direction=\"horizontal\"\n                                    style={{ paddingTop: \"10px\" }}\n                                  >\n                                    {newestVersion.explanationImage\n                                      ? newestVersion.explanationImage.map(\n                                          (image, index) => (\n                                            <Table\n                                              responsive=\"sm\"\n                                              size=\"sm\"\n                                              key={uuidv4()}\n                                              borderless\n                                              style={{ paddingBottom: \"0px\" }}\n                                            >\n                                              <thead>\n                                                <tr>\n                                                  <th\n                                                    style={{ padding: \"0px\" }}\n                                                  >\n                                                    {\" \"}\n                                                    <img\n                                                      alt={\n                                                        newestVersion.explanationImageAltText\n                                                          ? newestVersion\n                                                              .explanationImageAltText[\n                                                              index\n                                                            ]\n                                                          : \"We're missing an explanation here, contact us!\"\n                                                      }\n                                                      src={image}\n                                                      style={{\n                                                        paddingLeft: \"10px\",\n                                                        maxHeight: `12rem`,\n                                                        maxInlineSize: \"100%\",\n                                                      }}\n                                                    />\n                                                  </th>\n                                                </tr>\n                                              </thead>\n                                              <tbody>\n                                                <tr>\n                                                  <td\n                                                    className=\"text-center\"\n                                                    style={{ fontSize: \"10px\" }}\n                                                  >\n                                                    Figure:{index + 1}\n                                                  </td>\n                                                </tr>\n                                              </tbody>\n                                            </Table>\n                                          )\n                                        )\n                                      : null}\n                                  </Stack>\n                                </Accordion.Body>\n                              </Accordion.Item>\n                              <Accordion.Item eventKey=\"1\">\n                                <Accordion.Header>\n                                  View References\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                  {newestVersion.explanationLinks.length ? (\n                                    newestVersion.explanationLinks.map(\n                                      (sourcelink, index) => (\n                                        <Card\n                                          key={uuidv4()}\n                                          className=\"m-2 text-decoration-none \"\n                                        >\n                                          <Card.Body>\n                                            {\" \"}\n                                            <div>\n                                              {index + 1}{\" \"}\n                                              <div>\n                                                {parse(sourcelink)}\n                                                <style>\n                                                  {` a {\n                          color: inherit;\n                           text-decoration: none;}`}\n                                                </style>\n                                              </div>\n                                            </div>\n                                          </Card.Body>\n                                        </Card>\n                                      )\n                                    )\n                                  ) : (\n                                    <p\n                                      style={{\n                                        fontSize: \"16px\",\n                                      }}\n                                    >\n                                      No references available for this question.\n                                    </p>\n                                  )}\n                                </Accordion.Body>\n                              </Accordion.Item>\n                            </Accordion>\n                          </Stack>\n                        </Card>\n                      </Stack>\n                    </Tab>\n                    {/* <----------------------End of V1-------------------> */}\n\n                    {allOtherVersions.map((eachVersion, idx) => (\n                      <Tab\n                        eventKey={`${eachVersion.id}`}\n                        key={uuidv4()}\n                        title={`Version ${allOtherVersions.length - idx} `}\n                      >\n                        <Card className=\"mb-4\">\n                          <Card.Header\n                            style={{ fontSize: \"75%\", color: \"red\" }}\n                            id=\"no-border\"\n                            className=\"d-flex justify-content-end\"\n                          >\n                            Unique ID: {eachVersion.id}\n                          </Card.Header>\n\n                          <Card.Header\n                            id=\"no-border\"\n                            className=\"text-center\"\n                            style={{\n                              fontSize: \"100%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            Question {eachVersion.displayId}:{\" \"}\n                            {eachVersion.question}\n                          </Card.Header>\n                          <Card.Header\n                            id=\"no-border\"\n                            className=\"d-flex justify-content-center\"\n                          >\n                            <Stack\n                              direction=\"horizontal\"\n                              style={{ paddingTop: \"10px\" }}\n                            >\n                              {eachVersion.questionImage\n                                ? eachVersion.questionImage.map(\n                                    (image, index) => (\n                                      <Table\n                                        responsive=\"sm\"\n                                        size=\"sm\"\n                                        key={uuidv4()}\n                                        borderless\n                                        style={{ paddingBottom: \"0px\" }}\n                                      >\n                                        <thead>\n                                          <tr>\n                                            <th style={{ padding: \"0px\" }}>\n                                              {\" \"}\n                                              <img\n                                                alt={\n                                                  eachVersion.questionImageAltText\n                                                    ? eachVersion\n                                                        .questionImageAltText[\n                                                        index\n                                                      ]\n                                                    : \"We're missing an explanation here, contact us!\"\n                                                }\n                                                src={image}\n                                                style={{\n                                                  paddingLeft: \"10px\",\n                                                  maxHeight: `12rem`,\n                                                  maxInlineSize: \"100%\",\n                                                }}\n                                              />\n                                            </th>\n                                          </tr>\n                                        </thead>\n                                        <tbody>\n                                          <tr>\n                                            <td\n                                              className=\"text-center\"\n                                              style={{ fontSize: \"10px\" }}\n                                            >\n                                              Figure:{index + 1}\n                                            </td>\n                                          </tr>\n                                        </tbody>\n                                      </Table>\n                                    )\n                                  )\n                                : null}\n                            </Stack>\n                          </Card.Header>\n                          <Card.Header className=\"d-flex justify-content-end\">\n                            <Button\n                              variant=\"link\"\n                              size=\"small\"\n                              onClick={() =>\n                                handleShow(eachVersion.id, \"older\")\n                              } //Step1: Delete icon clicked and specific id & position passed to handleShow function\n                            >\n                              {\" \"}\n                              <DeleteIcon />\n                              Delete Version\n                            </Button>\n                            {/* <------------------End delete q Btn---------------> */}\n                          </Card.Header>\n\n                          <Stack>\n                            <Card\n                              className=\"mx-auto\"\n                              id=\"no-border\"\n                              style={{ minWidth: \"50%\" }}\n                            >\n                              <Table responsive=\"sm\" borderless>\n                                <thead>\n                                  <tr>\n                                    <th>Answer Options</th>\n                                    <th>Responses</th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <style type=\"text/css\">\n                                    {`\n    .btn-success {\n      background-color: #7cb69d;\n      border-color:#7cb69d;\n      color: white;\n    }\n    .btn-danger{\n      background-color: #FF7276;\n      border-color: #FF7276;\n    }\n    `}\n                                  </style>\n                                  {eachVersion.answerOptions\n                                    ? eachVersion.answerOptions.map(\n                                        (ans, index) => (\n                                          <tr key={uuidv4()}>\n                                            <td>\n                                              <Button\n                                                tabIndex=\"-1\"\n                                                style={{ margin: \"0\" }}\n                                                variant={\n                                                  ans ===\n                                                  eachVersion.correctAnswer\n                                                    ? \"outline-success\"\n                                                    : \"outline-danger\"\n                                                }\n                                              >\n                                                {ans}\n                                              </Button>\n                                            </td>\n                                            <td>\n                                              <span className=\"visually-hidden\">{`${\n                                                responseData(\n                                                  eachVersion.id,\n                                                  ans\n                                                )\n                                                  ? responseData(\n                                                      eachVersion.id,\n                                                      ans\n                                                    )\n                                                  : 0\n                                              }%`}</span>\n                                              {\n                                                <ProgressBar\n                                                  // title=\"Progress bar for responses\"\n                                                  // aria-label=\"Progress bar for responses\"\n                                                  // name=\"Progress bar for responses\"\n                                                  aria-hidden=\"true\"\n                                                  variant={\n                                                    ans ===\n                                                    eachVersion.correctAnswer\n                                                      ? \"success\"\n                                                      : \"danger\"\n                                                  }\n                                                  style={{\n                                                    height: \"38px\",\n                                                    minWidth: \"100%\",\n                                                  }}\n                                                  now={\n                                                    // responseData(\n                                                    //   eachVersion.id,\n                                                    //   ans\n                                                    // ) ||\n                                                    // responseData(\n                                                    //   eachVersion.id,\n                                                    //   ans\n                                                    // ) == \"0\"\n                                                    //   ?\n                                                    //     responseData(\n                                                    //       eachVersion.id,\n                                                    //       ans\n                                                    //     )\n                                                    //   : 100\n                                                    100\n                                                  }\n                                                  label={`${\n                                                    responseData(\n                                                      eachVersion.id,\n                                                      ans\n                                                    )\n                                                      ? responseData(\n                                                          eachVersion.id,\n                                                          ans\n                                                        )\n                                                      : \"0\"\n                                                    // : 0\n                                                  }%`}\n                                                />\n                                              }\n                                            </td>\n                                          </tr>\n                                        )\n                                      )\n                                    : null}\n                                </tbody>\n                              </Table>{\" \"}\n                            </Card>\n                            <Accordion>\n                              <Accordion.Item eventKey=\"0\">\n                                <Accordion.Header>\n                                  View Explanation\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                  {eachVersion.explanation}\n                                  <Stack\n                                    direction=\"horizontal\"\n                                    style={{ paddingTop: \"10px\" }}\n                                  >\n                                    {eachVersion.explanationImage\n                                      ? eachVersion.explanationImage.map(\n                                          (image, index) => (\n                                            <Table\n                                              responsive=\"sm\"\n                                              size=\"sm\"\n                                              key={uuidv4()}\n                                              borderless\n                                              style={{ paddingBottom: \"0px\" }}\n                                            >\n                                              <thead>\n                                                <tr>\n                                                  <th\n                                                    style={{ padding: \"0px\" }}\n                                                  >\n                                                    {\" \"}\n                                                    <img\n                                                      alt={\n                                                        eachVersion.explanationImageAltText\n                                                          ? eachVersion\n                                                              .explanationImageAltText[\n                                                              index\n                                                            ]\n                                                          : \"We're missing an explanation here, contact us!\"\n                                                      }\n                                                      src={image}\n                                                      style={{\n                                                        paddingLeft: \"10px\",\n                                                        maxHeight: `12rem`,\n                                                        maxInlineSize: \"100%\",\n                                                      }}\n                                                    />\n                                                  </th>\n                                                </tr>\n                                              </thead>\n                                              <tbody>\n                                                <tr>\n                                                  <td\n                                                    className=\" text-center\"\n                                                    style={{ fontSize: \"10px\" }}\n                                                  >\n                                                    Figure:{index + 1}\n                                                  </td>\n                                                </tr>\n                                              </tbody>\n                                            </Table>\n                                          )\n                                        )\n                                      : null}\n                                  </Stack>\n                                </Accordion.Body>\n                              </Accordion.Item>\n                              <Accordion.Item eventKey=\"1\">\n                                <Accordion.Header>\n                                  View References\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                  {eachVersion.explanationLinks.length ? (\n                                    eachVersion.explanationLinks.map(\n                                      (sourcelink, index) => (\n                                        // {explanationLinks.length ? (\n                                        //   explanationLinks.map((sourcelink, index) => (\n                                        <Card\n                                          key={uuidv4()}\n                                          className=\"m-2 text-decoration-none \"\n                                        >\n                                          <Card.Body>\n                                            {\" \"}\n                                            <div>\n                                              {index + 1}{\" \"}\n                                              <div>\n                                                {parse(sourcelink)}\n                                                <style>\n                                                  {` a {\n                              color: inherit;\n                               text-decoration: none;}`}\n                                                </style>\n                                              </div>\n                                            </div>\n                                          </Card.Body>\n                                        </Card>\n                                      )\n                                    )\n                                  ) : (\n                                    <p\n                                      style={{\n                                        fontSize: \"16px\",\n                                      }}\n                                    >\n                                      No references available for this question.\n                                    </p>\n                                  )}\n                                </Accordion.Body>\n                              </Accordion.Item>\n                            </Accordion>\n                          </Stack>\n                        </Card>\n                      </Tab>\n                    ))}\n                  </Tabs>\n                )}\n              </div>\n            ) : (\n              <>\n                {/* {\" \"}\n                <Link to={`/questions`} style={{ textDecoration: `none` }}>\n                  <Button\n                    variant=\"outline-danger\"\n                    size=\"lg\"\n                    style={{ textAlign: \"center\" }}\n                  >\n                    Navigate to All Questions\n                  </Button>\n                </Link> */}\n              </>\n            )}\n          </div>\n        </Stack>\n      )}\n    </Container>\n  );\n};\n\nexport default SingleQAadmin;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchSingleQuestion,\n  deleteSingleQuestion,\n} from \"./singleQuestionSlice\";\nimport { useParams, Link } from \"react-router-dom\";\nimport {\n  Card,\n  Stack,\n  Button,\n  Breadcrumb,\n  ProgressBar,\n  Container,\n  Row,\n  Col,\n  Accordion,\n  Table,\n} from \"react-bootstrap/\";\nimport {\n  fetchAllUserQuestions,\n  fetchUserQuestions,\n  updateUserQuestion,\n  updateUserQuestionInput,\n} from \"../stats/user_questionsSlice\";\nimport SingleQAadmin from \"./SingleQAadmin\";\nimport { Divider } from \"@mui/material\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport parse from \"html-react-parser\";\n\nconst SingleQuestion = () => {\n  const admin = useSelector((state) => state.auth.me.isAdmin);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 500);\n  }, []);\n\n  const handleOptionSelection = (option) => {\n    if (showAnswer) {\n      return;\n    }\n    setSelectedOption(option);\n  };\n\n  const { singleQuestionId } = useParams();\n  const dispatch = useDispatch();\n\n  const userId = useSelector((state) => state.auth.me.id);\n  const userExpertise = useSelector((state) => state.auth.me.expertise);\n\n  useEffect(() => {\n    // dispatch(\n    //   updateUserQuestionInput({\n    //     userId: userId,\n    //     questionAnswerId: singleQuestionId,\n    //   })\n    // ).then(() => dispatch(fetchSingleQuestion(singleQuestionId)));\n    // dispatch(fetchUserQuestions(userId)).then(()=>dispatch(fetchSingleQuestion(singleQuestionId)) )\n  }, []);\n\n  useEffect(() => {\n    dispatch(fetchUserQuestions()).then(() =>\n      dispatch(fetchSingleQuestion(singleQuestionId))\n    );\n    window.scrollTo(0, 0);\n  }, []);\n  const singleQ = useSelector((state) => state.SingleQuestion.Question);\n\n  const {\n    id,\n    question,\n    answerOptions,\n    correctAnswer,\n    explanation,\n    explanationImage,\n    explanationImageAltText,\n    questionImage,\n    questionImageAltText,\n    explanationLinks,\n    category,\n    level,\n    ancestorId,\n    displayId,\n  } = singleQ;\n\n  const AllUserQuestion = useSelector(\n    (state) => state.userQuestions.UserQuestions\n  );\n  const CurrentQuestionArray = AllUserQuestion.filter(\n    (object) => object.questionAnswerId === id\n  );\n\n  const CurrentQuestion = CurrentQuestionArray[0];\n\n  const handleSubmit = () => {\n    setShowAnswer(true);\n    dispatch(fetchSingleQuestion(id))\n      .then(() =>\n        dispatch(\n          updateUserQuestionInput({\n            questionAnswerId: id,\n            userInput: selectedOption,\n            answered: selectedOption === correctAnswer ? \"right\" : \"wrong\",\n            category: category,\n            level: level,\n            userExpertise: userExpertise,\n          })\n        )\n      )\n      .then(() => dispatch(fetchUserQuestions()));\n  };\n\n  if (admin) {\n    return <SingleQAadmin />;\n  } else {\n    if (CurrentQuestionArray.length > 0 && CurrentQuestion.answered) {\n      return (\n        <Container fluid>\n          {loading ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <>\n              <Stack gap={3} className=\"p-3\">\n                <Stack gap={3}>\n                  <Stack gap={3}>\n                    <Breadcrumb>\n                      <Breadcrumb.Item href=\"/questions\" id=\"breadcrumb\">\n                        All Questions\n                      </Breadcrumb.Item>\n                      <Breadcrumb.Item id=\"breadcrumb\" active>\n                        {\" \"}\n                        Question {displayId}\n                      </Breadcrumb.Item>\n                    </Breadcrumb>\n\n                    <Card>\n                      <Card.Header\n                        className=\"mb-2 text-center\"\n                        style={{\n                          fontSize: \"100%\",\n                          textAlign: \"center\",\n                        }}\n                      >\n                        {question}\n                      </Card.Header>\n                      <Card.Body\n                        className=\"mx-auto\"\n                        style={{ paddingBottom: \"0px\", marginBottom: \"0px\" }}\n                      >\n                        <Row className=\"mx-auto\">\n                          <Stack\n                            style={{\n                              paddingTop: \"10px\",\n                              paddingLeft: \"0px\",\n                              paddingRight: \"0px\",\n                            }}\n                            direction=\"horizontal\"\n                          >\n                            {questionImage\n                              ? questionImage.map((image, index) => (\n                                  <Table\n                                    responsive=\"sm\"\n                                    size=\"sm\"\n                                    key={uuidv4()}\n                                    borderless\n                                    style={{ paddingBottom: \"0px\" }}\n                                  >\n                                    <thead>\n                                      <tr>\n                                        <th style={{ padding: \"0px\" }}>\n                                          {\" \"}\n                                          <img\n                                            alt={\n                                              questionImageAltText\n                                                ? questionImageAltText[index]\n                                                : \"We're missing an explanation here, contact us!\"\n                                            }\n                                            src={image}\n                                            style={{\n                                              paddingLeft: \"10px\",\n                                              maxHeight: `12rem`,\n                                              maxInlineSize: \"100%\",\n                                            }}\n                                          />\n                                        </th>\n                                      </tr>\n                                    </thead>\n                                    <tbody>\n                                      <tr>\n                                        <td\n                                          className=\"text-center\"\n                                          style={{ fontSize: \"10px\" }}\n                                        >\n                                          Figure:{index + 1}\n                                        </td>\n                                      </tr>\n                                    </tbody>\n                                  </Table>\n                                ))\n                              : null}\n                          </Stack>\n                        </Row>\n                      </Card.Body>\n                      <Card.Body className=\"mx-auto\">\n                        <Row style={{ paddingBottom: \"2%\" }}>\n                          <center>\n                            <span className=\"visually-hidden\">\n                              Select your answer:\n                            </span>\n                            <Divider aria-hidden=\"true\">\n                              Select your answer:\n                            </Divider>\n                          </center>\n                        </Row>\n                        <Row className=\"mx-auto\">\n                          {answerOptions\n                            ? answerOptions.map((ans, index) => (\n                                <Button\n                                  as={Col}\n                                  className=\"ms-3 mb-2\"\n                                  key={uuidv4()}\n                                  // variant={selectedOption === ans ? \"success\" : \"outline-success\"}\n                                  variant={\n                                    CurrentQuestion.userInput\n                                      ? ans === correctAnswer\n                                        ? \"success\"\n                                        : \"danger\"\n                                      : CurrentQuestion.answered === ans\n                                      ? \"success\"\n                                      : \"outline-success\"\n                                  }\n                                >\n                                  {ans}\n                                </Button>\n                              ))\n                            : null}\n                        </Row>\n                      </Card.Body>\n                      <Card.Footer>\n                        <Stack\n                          direction=\"horizontal\"\n                          gap={3}\n                          className=\" mx-auto\"\n                        >\n                          <Button\n                            className=\"mx-auto\"\n                            variant=\"danger\"\n                            // onClick={handleSubmit}\n                            disabled={selectedOption === null}\n                          >\n                            Submit\n                          </Button>\n                        </Stack>\n                      </Card.Footer>\n                    </Card>\n                  </Stack>\n                </Stack>\n\n                {\n                  <Stack gap={3}>\n                    <Card className=\"mx-auto\">\n                      <Table>\n                        <thead>\n                          <tr className=\"text-center\">\n                            <th>Correct Answer</th>\n                            <th>Your Answer</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr className=\"no-border\">\n                            <td style={{ borderBottomWidth: \"0px\" }}>\n                              <style type=\"text/css\">\n                                {`\n    .btn-success {\n      background-color: #7cb69d;\n      border-color:#7cb69d;\n      color: white;\n    }\n    .btn-danger{\n      background-color: #FF7276;\n      border-color: #FF7276;\n    }\n\n    `}\n                              </style>\n                              <Button variant={\"success\"}>\n                                {correctAnswer}\n                              </Button>\n                            </td>\n                            <td style={{ borderBottomWidth: \"0px\" }}>\n                              {\" \"}\n                              <Button\n                                id=\"btn-muted\"\n                                variant={\n                                  CurrentQuestion.userInput\n                                    ? CurrentQuestion.userInput ===\n                                      correctAnswer\n                                      ? \"success\"\n                                      : \"danger\"\n                                    : CurrentQuestion.userInput ===\n                                      selectedOption\n                                    ? \"success\"\n                                    : \"outline-success\"\n                                }\n                              >\n                                {CurrentQuestion.userInput}\n                              </Button>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </Table>\n                    </Card>\n                    <Accordion>\n                      <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>View Explanation</Accordion.Header>\n                        <Accordion.Body>{explanation}</Accordion.Body>\n                        <Accordion.Body\n                          className=\"mx-auto\"\n                          style={{ paddingBottom: \"0px\", marginBottom: \"0px\" }}\n                        >\n                          <Row className=\"mx-auto\">\n                            <Stack\n                              style={{\n                                paddingTop: \"10px\",\n                                paddingLeft: \"0px\",\n                                paddingRight: \"0px\",\n                              }}\n                              direction=\"horizontal\"\n                            >\n                              {explanationImage\n                                ? explanationImage.map((image, index) => (\n                                    <Table\n                                      responsive=\"sm\"\n                                      size=\"sm\"\n                                      key={uuidv4()}\n                                      borderless\n                                      style={{ paddingBottom: \"0px\" }}\n                                    >\n                                      <thead>\n                                        <tr>\n                                          <th style={{ padding: \"0px\" }}>\n                                            {\" \"}\n                                            <img\n                                              alt={\n                                                explanationImageAltText\n                                                  ? explanationImageAltText[\n                                                      index\n                                                    ]\n                                                  : \"We're missing an explanation here, contact us!\"\n                                              }\n                                              src={image}\n                                              style={{\n                                                paddingLeft: \"10px\",\n                                                maxHeight: `12rem`,\n                                                maxInlineSize: \"100%\",\n                                              }}\n                                            />\n                                          </th>\n                                        </tr>\n                                      </thead>\n                                      <tbody>\n                                        <tr>\n                                          <td\n                                            className=\"text-center\"\n                                            style={{ fontSize: \"10px\" }}\n                                          >\n                                            Figure:{index + 1}\n                                          </td>\n                                        </tr>\n                                      </tbody>\n                                    </Table>\n                                  ))\n                                : null}\n                            </Stack>\n                          </Row>\n                        </Accordion.Body>\n                      </Accordion.Item>\n                      <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>View References</Accordion.Header>\n                        <Accordion.Body>\n                          {explanationLinks.length ? (\n                            explanationLinks.map((sourcelink, index) => (\n                              <Card\n                                key={uuidv4()}\n                                className=\"m-2 text-decoration-none \"\n                              >\n                                <Card.Body>\n                                  {\" \"}\n                                  <div>\n                                    {index + 1}{\" \"}\n                                    <div>\n                                      {parse(sourcelink)}\n                                      <style>\n                                        {` a {\n                              color: inherit;\n                               text-decoration: none;}`}\n                                      </style>\n                                    </div>\n                                  </div>\n                                </Card.Body>\n                              </Card>\n                            ))\n                          ) : (\n                            <p\n                              style={{\n                                fontSize: \"16px\",\n                              }}\n                            >\n                              No references available for this question.\n                            </p>\n                          )}\n                        </Accordion.Body>\n                      </Accordion.Item>\n                    </Accordion>\n                  </Stack>\n                }\n              </Stack>\n            </>\n          )}\n        </Container>\n      );\n    } else {\n      // <------------------Not answered view ------------------>\n      return (\n        <Container fluid>\n          {loading ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <Stack gap={3} className=\"p-3\">\n              <Stack gap={3}>\n                <Stack gap={3}>\n                  <Breadcrumb>\n                    <Breadcrumb.Item id=\"breadcrumb\" href=\"/questions\">\n                      All Questions\n                    </Breadcrumb.Item>\n                    <Breadcrumb.Item id=\"breadcrumb\" active>\n                      Question {displayId}\n                    </Breadcrumb.Item>\n                  </Breadcrumb>\n\n                  <Card>\n                    <Card.Header\n                      className=\"mb-2 text-center\"\n                      style={{\n                        fontSize: \"100%\",\n\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {question}\n                    </Card.Header>\n                    <Card.Body\n                      className=\"mx-auto\"\n                      style={{ paddingBottom: \"0px\", marginBottom: \"0px\" }}\n                    >\n                      <Row className=\"mx-auto\">\n                        <Stack\n                          style={{\n                            paddingTop: \"10px\",\n                            paddingLeft: \"0px\",\n                            paddingRight: \"0px\",\n                          }}\n                          direction=\"horizontal\"\n                        >\n                          {questionImage\n                            ? questionImage.map((image, index) => (\n                                <Table\n                                  responsive=\"sm\"\n                                  size=\"sm\"\n                                  key={uuidv4()}\n                                  borderless\n                                  style={{ paddingBottom: \"0px\" }}\n                                >\n                                  <thead>\n                                    <tr>\n                                      <th style={{ padding: \"0px\" }}>\n                                        {\" \"}\n                                        <img\n                                          alt={\n                                            questionImageAltText\n                                              ? questionImageAltText[index]\n                                              : \"We're missing an explanation here, contact us!\"\n                                          }\n                                          src={image}\n                                          style={{\n                                            paddingLeft: \"10px\",\n                                            maxHeight: `12rem`,\n                                            maxInlineSize: \"100%\",\n                                          }}\n                                        />\n                                      </th>\n                                    </tr>\n                                  </thead>\n                                  <tbody>\n                                    <tr>\n                                      <td\n                                        className=\"text-center\"\n                                        style={{ fontSize: \"10px\" }}\n                                      >\n                                        Figure:{index + 1}\n                                      </td>\n                                    </tr>\n                                  </tbody>\n                                </Table>\n                              ))\n                            : null}\n                        </Stack>\n                      </Row>\n                    </Card.Body>\n                    <Card.Body className=\"mx-auto\">\n                      <Row style={{ paddingBottom: \"2%\" }}>\n                        <center>\n                          <span className=\"visually-hidden\">\n                            Select your answer:\n                          </span>\n                          <Divider aria-hidden=\"true\">\n                            Select your answer:\n                          </Divider>\n                        </center>\n                      </Row>\n                      <Row className=\"mx-auto\">\n                        <style type=\"text/css\">\n                          {`\n    .btn-success {\n      background-color: #7cb69d;\n      border-color:#7cb69d;\n      color: white;\n    }\n    .btn-danger{\n      background-color: #FF7276;\n      border-color: #FF7276;\n    }\n    .btn-outline-success{\n\n      border-color:#7cb69d;\n\n    }\n\n    `}\n                        </style>\n                        {answerOptions\n                          ? answerOptions.map((ans, index) => (\n                              <Button\n                                as={Col}\n                                className=\"ms-3 mb-2\"\n                                key={uuidv4()}\n                                // variant={selectedOption === ans ? \"success\" : \"outline-success\"}\n                                variant={\n                                  showAnswer\n                                    ? ans === correctAnswer\n                                      ? \"success\"\n                                      : \"danger\"\n                                    : selectedOption === ans\n                                    ? \"success\"\n                                    : \"outline-success\"\n                                }\n                                onClick={() => handleOptionSelection(ans)}\n                              >\n                                {ans}\n                              </Button>\n                            ))\n                          : null}\n                      </Row>\n                    </Card.Body>\n                    <Card.Footer>\n                      <Stack\n                        direction=\"horizontal\"\n                        gap={3}\n                        className=\" mx-auto\"\n                      >\n                        <Button\n                          className=\"mx-auto\"\n                          id=\"question-submit-btn\"\n                          variant=\"danger\"\n                          onClick={handleSubmit}\n                          disabled={selectedOption === null}\n                        >\n                          Submit\n                        </Button>\n                      </Stack>\n                    </Card.Footer>\n                  </Card>\n                </Stack>\n              </Stack>\n\n              {showAnswer && (\n                <Stack gap={3}>\n                  <Card className=\"mx-auto\">\n                    <Table>\n                      <thead>\n                        <tr className=\"text-center\">\n                          <th>Correct Answer</th>\n                          <th>Your Answer</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr className=\"no-border\">\n                          <td style={{ borderBottomWidth: \"0px\" }}>\n                            <style type=\"text/css\">\n                              {`\n.btn-success {\nbackground-color: #7cb69d;\nborder-color:#7cb69d;\ncolor: white;\n}\n.btn-danger{\nbackground-color: #FF7276;\nborder-color: #FF7276;\n}\n\n`}\n                            </style>\n                            <Button variant={\"success\"}>{correctAnswer}</Button>\n                          </td>\n                          <td style={{ borderBottomWidth: \"0px\" }}>\n                            {\" \"}\n                            <Button\n                              variant={\n                                showAnswer\n                                  ? selectedOption === correctAnswer\n                                    ? \"success\"\n                                    : \"danger\"\n                                  : selectedOption === selectedOption\n                                  ? \"success\"\n                                  : \"outline-success\"\n                              }\n                            >\n                              {selectedOption}\n                            </Button>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </Card>\n                  <Accordion>\n                    <Accordion.Item eventKey=\"0\">\n                      <Accordion.Header>View Explanation</Accordion.Header>\n                      <Accordion.Body>{explanation}</Accordion.Body>\n                    </Accordion.Item>\n                    <Accordion.Item eventKey=\"1\">\n                      <Accordion.Header>View References</Accordion.Header>\n                      <Accordion.Body>\n                        {explanationLinks.length ? (\n                          explanationLinks.map((sourcelink, index) => (\n                            <Card\n                              key={uuidv4()}\n                              className=\"m-2 text-decoration-none \"\n                            >\n                              <Card.Body>\n                                {\" \"}\n                                <div>\n                                  {index + 1}{\" \"}\n                                  <div>\n                                    {parse(sourcelink)}\n                                    <style>\n                                      {` a {\n                              color: inherit;\n                               text-decoration: none;}`}\n                                    </style>\n                                  </div>\n                                </div>\n                              </Card.Body>\n                            </Card>\n                          ))\n                        ) : (\n                          <p\n                            style={{\n                              fontSize: \"16px\",\n                            }}\n                          >\n                            No references available for this question.\n                          </p>\n                        )}\n                      </Accordion.Body>\n                    </Accordion.Item>\n                  </Accordion>\n                </Stack>\n              )}\n            </Stack>\n          )}\n        </Container>\n      );\n    }\n  }\n};\n\nexport default SingleQuestion;\n\n// const App = () => {\n//   const [answers, setAnswers] = useState([\n//     { id: 1, text: 'Option 1' },\n//     { id: 2, text: 'Option 2' },\n//     { id: 3, text: 'Option 3' },\n//   ]);\n//   const [editMode, setEditMode] = useState({});\n\n//   const handleEdit = (id) => {\n//     setEditMode({ ...editMode, [id]: true });\n//   };\n\n//   const handleSave = (id, text) => {\n//     const newAnswers = answers.map((answer) => {\n//       if (answer.id === id) {\n//         return { id, text };\n//       }\n//       return answer;\n//     });\n//     setAnswers(newAnswers);\n//     setEditMode({ ...editMode, [id]: false });\n//   };\n\n//   return (\n//     <div>\n//       {answers.map((answer) => {\n//         return editMode[answer.id] ? (\n//           <div key={answer.id}>\n//             <input\n//               type=\"text\"\n//               value={answer.text}\n//               onChange={(e) => handleSave(answer.id, e.target.value)}\n//             />\n//           </div>\n//         ) : (\n//           <div key={answer.id} onClick={() => handleEdit(answer.id)}>\n//             {answer.text}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// };\n"],"names":["DeleteIcon","EditIcon","parse","React","useEffect","useState","Accordion","Breadcrumb","Button","Card","Container","Modal","ProgressBar","Stack","Tab","Table","Tabs","useDispatch","useSelector","Link","useNavigate","useParams","v4","uuidv4","deleteSingleQuestion","fetchQAVersions","SingleQAadmin","_useParams","singleQuestionId","dispatch","navigate","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","newestVersion","id","_useState4","key","setKey","setTimeout","qaVersions","window","scrollTo","state","SingleQuestion","qaAllVersions","allOtherVersions","slice","responseData","qaId","ansOption","numOfPicks","totalResponses","userResponses","map","aVersion","_aVersion$user_questi","user_questions","eachUserInput","userInput","Math","round","_useState5","_useState6","deleteId","setDeleteId","_useState7","_useState8","deletePosition","setDeletePosition","_useState9","_useState10","show","setShow","handleShow","position","handleClose","handleDelete","concat","createElement","fluid","animated","now","gap","className","onHide","Header","closeButton","Title","Body","Footer","variant","onClick","length","Item","href","active","displayId","eachVersion","idx","style","width","fontSize","color","textAlign","question","direction","paddingTop","questionImage","image","index","responsive","size","borderless","paddingBottom","padding","alt","questionImageAltText","src","paddingLeft","maxHeight","maxInlineSize","tabIndex","to","textDecoration","minWidth","type","answerOptions","ans","margin","correctAnswer","height","label","eventKey","explanation","explanationImage","explanationImageAltText","explanationLinks","sourcelink","activeKey","onSelect","k","title","Fragment","fetchSingleQuestion","Row","Col","fetchAllUserQuestions","fetchUserQuestions","updateUserQuestion","updateUserQuestionInput","Divider","admin","auth","me","isAdmin","selectedOption","setSelectedOption","showAnswer","setShowAnswer","handleOptionSelection","option","userId","userExpertise","expertise","then","singleQ","Question","category","level","ancestorId","AllUserQuestion","userQuestions","UserQuestions","CurrentQuestionArray","filter","object","questionAnswerId","CurrentQuestion","handleSubmit","answered","marginBottom","paddingRight","as","disabled","borderBottomWidth"],"sourceRoot":""}